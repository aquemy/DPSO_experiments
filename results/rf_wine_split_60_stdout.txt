SCENARIO:
 {
    "control": {
        "seed": 42
    }, 
    "file_name": "rf_wine_split_60", 
    "policy": {
        "step_pipeline": 60
    }, 
    "setup": {
        "algorithm": "RandomForest", 
        "dataset": "wine", 
        "policy": "split", 
        "runtime": 300
    }, 
    "title": "Random Forest on Wine with Split policy"
}
## Data Pipeline
Best score: 0.933591331269 (0.0539271754362) [P] | Score: 0.933591331269 (0.0539271754362) [P]
Best score: 0.933591331269 (0.0539271754362) [P] | Score: 0.763349243206 (0.0715015603599) [P]
Best score: 0.949673202614 (0.0524547979797) [P] | Score: 0.949673202614 (0.0524547979797) [P]
Best score: 0.972187822497 (0.0373191871643) [P] | Score: 0.972187822497 (0.0373191871643) [P]
Best score: 0.972187822497 (0.0373191871643) [P] | Score: 0.911695906433 (0.0830100428493) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.972514619883 (0.0370596012111) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.847813467492 (0.0713999190186) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.972222222222 (0.0569275042553) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.639009287926 (0.0611606308146) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.89993120055 (0.069455242243) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.733412882697 (0.128384165621) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.725556845545 (0.0923873123714) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.899312005504 (0.0898216997203) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.707391640867 (0.0867855196902) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.972187822497 (0.0373191871643) [P]
Best score: 0.972514619883 (0.0370596012111) [P] | Score: 0.961661506708 (0.0479080516355) [P]
Best score: 0.977743378053 (0.0272938784642) [P] | Score: 0.977743378053 (0.0272938784642) [P]
Best score: 0.977743378053 (0.0272938784642) [P] | Score: 0.733488132095 (0.0950029304522) [P]
Best score: 0.977743378053 (0.0272938784642) [P] | Score: 0.911661506708 (0.0494248274027) [P]
Best score: 0.977743378053 (0.0272938784642) [P] | Score: 0.94441004472 (0.0430554711708) [P]
Best score: 0.977743378053 (0.0272938784642) [P] | Score: 0.961076711386 (0.0356160146865) [P]
Best score: 0.977743378053 (0.0272938784642) [P] | Score: 0.672116873065 (0.148292043191) [P]
Best score: 0.977743378053 (0.0272938784642) [P] | Score: 0.972222222222 (0.0512196914294) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.978070175439 (0.0268703745951) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.944083247334 (0.0362241066736) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.949597953216 (0.0525061579236) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.714370485036 (0.0985148455256) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.922480220158 (0.0361792104169) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.714370485036 (0.0985148455256) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.972514619883 (0.0274978197556) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.906725146199 (0.0684291743068) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.943756449948 (0.0456038385545) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.715432576539 (0.0947171967864) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.900877192982 (0.0950040452432) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.915903422773 (0.044534778441) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.960416666667 (0.0437058860488) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.749385104919 (0.0784993505586) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.961403508772 (0.03544650868) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.92829377365 (0.0637925923598) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.677672428621 (0.146936945837) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.703517371861 (0.0406856419164) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.885087719298 (0.0938323182594) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.757208892329 (0.0738406952811) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.961403508772 (0.0432867061373) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.714370485036 (0.0985148455256) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.743863949088 (0.100034268955) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.796934124527 (0.1093659463) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.86579377365 (0.0482738830091) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.82204377365 (0.0937959581828) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.796280529756 (0.101448169104) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.900257997936 (0.0644973488925) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.714370485036 (0.0985148455256) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.94963880289 (0.0312520884532) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.972514619883 (0.0370596012111) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.867509459924 (0.101845759184) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.949965600275 (0.0299560627161) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.805377106983 (0.0919359957408) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.91466503268 (0.0737226151813) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.884502923977 (0.0964491313452) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.960416666667 (0.0437058860488) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.879497764018 (0.102517072714) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.961661506708 (0.0479080516355) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.961403508772 (0.0499101480546) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.72618249054 (0.0892532093033) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.672116873065 (0.156395862721) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.861592707258 (0.0886460634509) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.727455280358 (0.073411327021) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.70424621603 (0.0812462066206) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.922119023048 (0.0621514499167) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.949597953216 (0.039017031136) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.965972222222 (0.0373259851399) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.938527691778 (0.0531085518734) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.769708892329 (0.0715260509981) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.890058479532 (0.098127191229) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.955521155831 (0.054457773983) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.94441004472 (0.0555728485771) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.83363003096 (0.107306415563) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.856621947024 (0.107528725203) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.960416666667 (0.0359572040722) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.698329463364 (0.0542615434953) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.955153508772 (0.0545656777572) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.928035775714 (0.0494777114598) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.922445820433 (0.0659089413545) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.949965600275 (0.0299560627161) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.955153508772 (0.0545656777572) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.791051771586 (0.109016905071) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.915576625387 (0.0522728657279) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.911661506708 (0.0494248274027) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.774604403165 (0.0998883726707) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.955486756106 (0.0417762528866) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.971527777778 (0.0378392575717) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.920874183007 (0.0668163933032) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.922772617819 (0.0654403117533) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.897847867217 (0.0573474710566) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.972514619883 (0.0370596012111) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.692371861025 (0.115336988747) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.884502923977 (0.105613856994) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.639009287926 (0.0611606308146) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.926797385621 (0.0674217142771) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.960709064327 (0.0358378223583) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.70424621603 (0.0812462066206) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.933591331269 (0.0325005907435) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.900842793258 (0.0871798317499) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.804431114551 (0.0752772885865) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.916924664603 (0.0507664653969) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.912280701754 (0.0953054914033) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.904499914001 (0.0611058022217) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.738239594083 (0.0912500344253) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.856621947024 (0.107528725203) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.831037151703 (0.0934270026477) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.933264533884 (0.0485744943622) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.797486670107 (0.106179677568) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.955555555556 (0.0484322104838) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.641092621259 (0.0835544379002) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.70424621603 (0.0812462066206) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.961076711386 (0.0356160146865) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.879170966632 (0.111332259384) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.917217062264 (0.0608451325573) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.920730134159 (0.0579239658126) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.889037237702 (0.0629853571838) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.928035775714 (0.0655735905922) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.916924664603 (0.0792523672365) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.905779153767 (0.0549934662514) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.697927416581 (0.127989082478) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.960709064327 (0.0436077225042) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.938820089439 (0.0463054700673) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.787764447884 (0.0811540444684) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.890058479532 (0.101223661311) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.954861111111 (0.0336286111467) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.960749914001 (0.0368115471763) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.955521155831 (0.0416062645037) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.879170966632 (0.111332259384) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.961001461988 (0.0427741057861) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.714370485036 (0.0985148455256) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.70424621603 (0.0812462066206) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.938854489164 (0.0461645876875) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.939439284486 (0.0564255347241) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.78707000344 (0.0915888967411) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.905779153767 (0.0741175899015) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.889439284486 (0.0888784245796) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.977743378053 (0.0272938784642) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.719680942552 (0.104904145731) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.944334795322 (0.0550424641413) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.944083247334 (0.0439257311256) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.938820089439 (0.0390757291364) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.911661506708 (0.0494248274027) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.826176040592 (0.0657868152751) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.931658496732 (0.0662556136327) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.879170966632 (0.111332259384) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.961403508772 (0.0499101480546) [P]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.977743378053 (0.0272938784642) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {}
BEST SCORE: 0.978070175439 (0.0268703745951)
##################################################
## Algorithm
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 2, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 2, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, '0efa64965bef772b3744264744350d00ce5be763': 52, ...}, 'iteration': 154, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, '0efa64965bef772b3744264744350d00ce5be763': 52, ...}, 'iteration': 154, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, '0efa64965bef772b3744264744350d00ce5be763': 52, ...}, 'iteration': 154, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:36:54 2019
PID: 24528                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.0 (0.0) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.977777777778 (0.0368513865595) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 2, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 2, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, '0efa64965bef772b3744264744350d00ce5be763': 52, ...}, 'iteration': 159, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, '0efa64965bef772b3744264744350d00ce5be763': 52, ...}, 'iteration': 159, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, '0efa64965bef772b3744264744350d00ce5be763': 52, ...}, 'iteration': 159, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:36:58 2019
PID: 24574                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.0 (0.0) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 0, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 0, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, '0efa64965bef772b3744264744350d00ce5be763': 52, ...}, 'iteration': 161, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, '0efa64965bef772b3744264744350d00ce5be763': 52, ...}, 'iteration': 161, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, '0efa64965bef772b3744264744350d00ce5be763': 52, ...}, 'iteration': 161, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:01 2019
PID: 24615                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.0 (0.0) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.971895424837 (0.0281197709337) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.960416666667 (0.0502741327715) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.966339869281 (0.0370608983754) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.944042397661 (0.0497458707396) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, ...}, 'iteration': 171, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, ...}, 'iteration': 171, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, ...}, 'iteration': 171, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:09 2019
PID: 24652                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.0 (0.0) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, ...}, 'iteration': 173, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, ...}, 'iteration': 173, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.21509194374084473, 'iteration': 23, 'loss': 0.021929824561403466, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9780701754385965, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, '0a29b60dac5908029404651ab16c2398e75577f6': 107, '0ab3dadde7e7a63ed750ad60695806d46f260e1f': 65, ...}, 'iteration': 173, 'max_history_score': 0.9780701754385965, 'max_history_score_std': 0.02687037459510562, 'max_history_step': 'pipeline'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:11 2019
PID: 24690                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.0 (0.0) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.977083333333 (0.0281314293063) [A]
Best score: 0.978070175439 (0.0268703745951) [P] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09c9d5709311e684de07d859b5f8520831c02a37': 174, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, ...}, 'iteration': 180, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09c9d5709311e684de07d859b5f8520831c02a37': 174, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, ...}, 'iteration': 180, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09c9d5709311e684de07d859b5f8520831c02a37': 174, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, ...}, 'iteration': 180, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:16 2019
PID: 24728                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 2}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 2}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 50}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 50}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09c9d5709311e684de07d859b5f8520831c02a37': 174, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, ...}, 'iteration': 183, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 50}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09c9d5709311e684de07d859b5f8520831c02a37': 174, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, ...}, 'iteration': 183, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 50}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09c9d5709311e684de07d859b5f8520831c02a37': 174, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, ...}, 'iteration': 183, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:19 2019
PID: 24764                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 49
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=50, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0272165526976) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971527777778 (0.0378392575717) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09c9d5709311e684de07d859b5f8520831c02a37': 174, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, ...}, 'iteration': 187, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09c9d5709311e684de07d859b5f8520831c02a37': 174, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, ...}, 'iteration': 187, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '09c9d5709311e684de07d859b5f8520831c02a37': 174, '09d2431a71e4232209190be7a4d2ed0afd4ff4cf': 141, ...}, 'iteration': 187, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:23 2019
PID: 24804                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.950257997936 (0.0518024221115) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.037267799625) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 2}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 2}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 50}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 50}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 193, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 50}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 193, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 50}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 193, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:28 2019
PID: 24841                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 49
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=50, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.0512196914294) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 197, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 197, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 197, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:32 2019
PID: 24878                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977450980392 (0.0276312938875) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.960416666667 (0.0502741327715) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949305555556 (0.0462783530043) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.932604489164 (0.0331832611461) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 0, 'n_estimators': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 0, 'n_estimators': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 10}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 10}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 203, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 10}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 203, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 10}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 203, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:36 2019
PID: 24917                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...=42,
            verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...ate=42,
            verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 9
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=10, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.950257997936 (0.0518024221115) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 209, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 209, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 209, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:41 2019
PID: 24955                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949597953216 (0.0525061579236) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0281197709337) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966264619883 (0.0371673148138) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.93293128655 (0.0544016952232) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 215, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 215, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 215, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:46 2019
PID: 24994                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...   random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949271155831 (0.0390724736078) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949305555556 (0.0462783530043) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 222, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 222, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 222, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:51 2019
PID: 25031                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 9
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=10, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.037267799625) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0375233989396) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.944042397661 (0.0430971890617) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 0, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 0, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 229, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 229, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 229, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:37:56 2019
PID: 25070                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.955153508772 (0.041747398576) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.0512196914294) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949597953216 (0.0525061579236) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 2}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 2}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 235, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 235, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 235, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:02 2019
PID: 25108                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 49
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=50, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0281197709337) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.932604489164 (0.0331832611461) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 2}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 2}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 240, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 240, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 240, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:06 2019
PID: 25147                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 49
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=50, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0373259851399) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.932604489164 (0.0483290463544) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.961403508772 (0.0499101480546) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.955153508772 (0.041747398576) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 250, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 250, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 250, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:14 2019
PID: 25182                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965645424837 (0.0375268008021) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0375233989396) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949271155831 (0.0390724736078) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 2}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 2}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 260, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 260, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 260, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:23 2019
PID: 25221                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 49
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=50, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.910674664603 (0.0256083368298) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 265, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 265, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 265, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:28 2019
PID: 25259                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...   random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966666666667 (0.0509175077217) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 2}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 2}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 50}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 50}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 271, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 50}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 271, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 50}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 271, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:32 2019
PID: 25297                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 49
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=50, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0272165526976) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.960416666667 (0.0502741327715) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 276, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 276, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 276, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:36 2019
PID: 25335                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.961076711386 (0.0500306746245) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.944042397661 (0.0430971890617) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 0, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 0, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 280, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 280, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 280, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:40 2019
PID: 25375                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.93816004472 (0.0388646581966) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.938486842105 (0.0524210095947) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966632266942 (0.0368981749401) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 0, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 0, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 286, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 286, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 286, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:45 2019
PID: 25412                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949271155831 (0.0390724736078) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966666666667 (0.0509175077217) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 291, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 291, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, '09c9d5709311e684de07d859b5f8520831c02a37': 174, ...}, 'iteration': 291, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:49 2019
PID: 25449                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.93816004472 (0.0388646581966) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.037267799625) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949271155831 (0.0390724736078) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.950257997936 (0.0518024221115) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 2}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 2}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 50}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 50}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 298, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 50}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 298, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 50}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 298, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:55 2019
PID: 25488                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 49
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=50, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 301, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 301, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 301, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:38:57 2019
PID: 25527                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966666666667 (0.0509175077217) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': 10}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': 10}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 308, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': 10}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 308, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': 10}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 308, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:03 2019
PID: 25565                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...=42,
            verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...ate=42,
            verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 9
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=10, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.93816004472 (0.0388646581966) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966666666667 (0.0509175077217) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.0512196914294) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0375233989396) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 315, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 315, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 315, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:08 2019
PID: 25601                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966666666667 (0.0509175077217) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.910674664603 (0.0256083368298) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.950257997936 (0.0518024221115) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 322, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 322, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, '090de73791ef4e84a3d8c2f73d4187d294420aee': 190, ...}, 'iteration': 322, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:13 2019
PID: 25639                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...=42,
            verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...ate=42,
            verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.955153508772 (0.041747398576) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.938486842105 (0.0524210095947) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0375233989396) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 1, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 1, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, ...}, 'iteration': 327, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, ...}, 'iteration': 327, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, '079152f862d6a3504c11a5ac911f13beb34e10bf': 171, ...}, 'iteration': 327, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:19 2019
PID: 25678                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0272165526976) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949305555556 (0.0462783530043) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 0, 'n_estimators': 2}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 0, 'n_estimators': 2}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 50}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 50}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, ...}, 'iteration': 337, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 50}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, ...}, 'iteration': 337, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 50}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, ...}, 'iteration': 337, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:27 2019
PID: 25715                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 49
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=50, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.932604489164 (0.0331832611461) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.961403508772 (0.0499101480546) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, ...}, 'iteration': 345, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, ...}, 'iteration': 345, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, '070811b2316cd9e381843c4552ecd576bb8e1194': 151, ...}, 'iteration': 345, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:33 2019
PID: 25755                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.955153508772 (0.041747398576) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, ...}, 'iteration': 349, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, ...}, 'iteration': 349, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, ...}, 'iteration': 349, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:37 2019
PID: 25794                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 9
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=10, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.938486842105 (0.0524210095947) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.944042397661 (0.0430971890617) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, ...}, 'iteration': 353, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, ...}, 'iteration': 353, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, '06900bef806f29c8778c1219a5e04d350ce00e28': 60, ...}, 'iteration': 353, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:41 2019
PID: 25832                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...=42,
            verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...ate=42,
            verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.037267799625) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.978070175439 (0.0268703745951) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.944042397661 (0.0430971890617) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0272165526976) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965645424837 (0.0375268008021) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, ...}, 'iteration': 360, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, ...}, 'iteration': 360, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, ...}, 'iteration': 360, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:46 2019
PID: 25868                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.037267799625) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 2, 'n_estimators': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 2, 'n_estimators': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 10}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 10}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, ...}, 'iteration': 365, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 10}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, ...}, 'iteration': 365, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': 10}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, '063c4a0c5ddcd328e401209a18e75f194eca6fb7': 112, ...}, 'iteration': 365, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:51 2019
PID: 25905                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 9
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=10, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0272165526976) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 2}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 2}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 50}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 50}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 368, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 50}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 368, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 50}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 368, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:54 2019
PID: 25945                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 49
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 50), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=50, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.955153508772 (0.041747398576) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966666666667 (0.0509175077217) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0373259851399) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 373, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 373, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 373, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:39:58 2019
PID: 25984                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0281197709337) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.955153508772 (0.041747398576) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965645424837 (0.0375268008021) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 1, 'n_estimators': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 1, 'n_estimators': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 25}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 25}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 378, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 25}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 378, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': 25}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 378, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:40:02 2019
PID: 26020                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 24
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 25), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=25, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.938486842105 (0.0524210095947) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965645424837 (0.0375268008021) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.950257997936 (0.0518024221115) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965645424837 (0.0375268008021) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972514619883 (0.0370596012111) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965645424837 (0.0375268008021) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 388, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 388, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 388, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:40:09 2019
PID: 26058                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.955521155831 (0.0484599339307) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 392, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 392, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 5, 'n_estimators': 10}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, '05db0923b8e9f3fcb8f969e533035f0aeb499b7b': 175, '05edc299c6ffcab28fe7d4e8f2040d9272e6ac0c': 347, ...}, 'iteration': 392, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:40:12 2019
PID: 26097                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 9
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=10, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965645424837 (0.0375268008021) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949305555556 (0.0462783530043) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.960382266942 (0.0359991826391) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.932604489164 (0.0483290463544) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0272165526976) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.93816004472 (0.0523930296697) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0281197709337) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.0512196914294) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.936771155831 (0.0510872111099) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965645424837 (0.0375268008021) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.938486842105 (0.0524210095947) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.037267799625) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.93293128655 (0.0544016952232) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 2, 'n_estimators': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_split': 2, 'n_estimators': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': 10}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': 10}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, ...}, 'iteration': 410, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': 10}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, ...}, 'iteration': 410, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': 10}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, ...}, 'iteration': 410, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:40:28 2019
PID: 26134                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 9
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 10), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=10, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.0512196914294) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0281197709337) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 0, 'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 0, 'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, ...}, 'iteration': 413, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': True, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, ...}, 'iteration': 413, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': True, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, ...}, 'iteration': 413, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:40:31 2019
PID: 26172                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...e, random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=True, class_wei...se, random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    114                 simplefilter('ignore', DeprecationWarning)
    115                 curr_sample_weight *= compute_sample_weight('auto', y, indices)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
--> 119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
        curr_sample_weight = array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.])
    120     else:
    121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
    122 
    123     return tree

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=array([3., 3., 0., 1., 1., 2., 2., 0., 1., 2., 0...,
       1., 2., 1., 3., 1., 0., 1., 0., 1., 1.]), check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.932604489164 (0.0331832611461) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.983333333333 (0.0254587538609) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.944042397661 (0.0497458707396) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966666666667 (0.0509175077217) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 1, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 1, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, ...}, 'iteration': 419, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, ...}, 'iteration': 419, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 34, '05668c7bc7465240926f421ad2560513f2c31b83': 298, ...}, 'iteration': 419, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:40:36 2019
PID: 26209                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...   random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.972222222222 (0.037267799625) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949305555556 (0.0462783530043) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.893605951152 (0.0376196126593) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966666666667 (0.0509175077217) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 0, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0032ae0a43fdeb99d753f1626a050fad67b24699': 429, '0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '007f321e04e7474976b34ad46defc8d08c113efe': 422, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, ...}, 'iteration': 430, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0032ae0a43fdeb99d753f1626a050fad67b24699': 429, '0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '007f321e04e7474976b34ad46defc8d08c113efe': 422, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, ...}, 'iteration': 430, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0032ae0a43fdeb99d753f1626a050fad67b24699': 429, '0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '007f321e04e7474976b34ad46defc8d08c113efe': 422, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, ...}, 'iteration': 430, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:40:45 2019
PID: 26247                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...   random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.971895424837 (0.0281197709337) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.966264619883 (0.0371673148138) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 3}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_split': 1, 'n_estimators': 3}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0032ae0a43fdeb99d753f1626a050fad67b24699': 429, '0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '007f321e04e7474976b34ad46defc8d08c113efe': 422, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, ...}, 'iteration': 434, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0032ae0a43fdeb99d753f1626a050fad67b24699': 429, '0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '007f321e04e7474976b34ad46defc8d08c113efe': 422, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, ...}, 'iteration': 434, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': 75}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0032ae0a43fdeb99d753f1626a050fad67b24699': 429, '0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '007f321e04e7474976b34ad46defc8d08c113efe': 422, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, ...}, 'iteration': 434, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:40:48 2019
PID: 26285                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...=42,
            verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...e=42,
            verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...ate=42,
            verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 74
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 75), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...tate=42,
            verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=75, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.949271155831 (0.0390724736078) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/rf_wine_split_60.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 240
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'bootstrap': <hyperopt.pyll.base.Apply object>, 'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'n_estimators': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=240, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'bootstrap': 1, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 0, 'n_estimators': 4}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'bootstrap': 1, 'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 0, 'n_estimators': 4}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': 100}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': 100}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0032ae0a43fdeb99d753f1626a050fad67b24699': 429, '0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '007f321e04e7474976b34ad46defc8d08c113efe': 422, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, ...}, 'iteration': 438, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': 100}
        algorithm = 'RandomForest'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0032ae0a43fdeb99d753f1626a050fad67b24699': 429, '0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '007f321e04e7474976b34ad46defc8d08c113efe': 422, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, ...}, 'iteration': 438, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'bootstrap': False, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': 100}, algorithm='RandomForest', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.9444100447196423, 'baseline_score_std': 0.04305547117084885, 'best_config': {'algorithm': {'bootstrap': True, 'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_split': 3, 'n_estimators': 50}, 'config_hash': {'algorithm': 'b453951cbc63da8e4d5fe99a30afd7238b3055c2', 'config': 'f1c3e35eb5c95f8dcfcc79df52bcc93062f7d367', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.6951861381530762, 'iteration': 177, 'loss': 0.016666666666666607, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9833333333333334, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7cb9198e3b87b369788b861e5f4c53870943a884', 'pipeline': 'cac8b7e3c0b95a3a796606de08acaff053faf9f3'}, 'duration': 0.5797700881958008, 'iteration': 0, 'loss': 0.0664086687306501, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.9335913312693499, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1643622f60bd6689991bf72fdccd9269b6322c7b', 'pipeline': '932d4c9a47e4e1db0b929267aaaf2c5b2fc9ba58'}, 'duration': 0.6547460556030273, 'iteration': 1, 'loss': 0.23665075679394565, 'max_history_score': 0.9335913312693499, 'max_history_score_std': 0.05392717543622946, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7633492432060544, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'pipeline': '872c65aaa8e2af9ad51f194340b717a468c08468'}, 'duration': 0.39411091804504395, 'iteration': 2, 'loss': 0.05032679738562096, 'max_history_score': 0.949673202614379, 'max_history_score_std': 0.05245479797969491, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.949673202614379, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'pipeline': 'aaf976c7c663a31fa039582d42f9e07101556a7c'}, 'duration': 0.33558106422424316, 'iteration': 3, 'loss': 0.027812177502580027, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', 'pipeline': '37d1ae2bd3a2354bce2748d69d07b5db4b32093a'}, 'duration': 0.1843249797821045, 'iteration': 4, 'loss': 0.08830409356725144, 'max_history_score': 0.97218782249742, 'max_history_score_std': 0.03731918716428826, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9116959064327486, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.1616978645324707, 'iteration': 5, 'loss': 0.027485380116959113, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.9725146198830409, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3546b4645feb8372afad2a44628b0deb1328e129', 'pipeline': '1b6fc33360a8802306ee603ec99eb6e577631fb2'}, 'duration': 0.6621968746185303, 'iteration': 6, 'loss': 0.15218653250773995, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.84781346749226, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'pipeline': 'b8c6433e8fcef261fda1f062b09be2d0444843da'}, 'duration': 0.2280418872833252, 'iteration': 7, 'loss': 0.0277777777777779, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9722222222222221, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd48352570b5713401f8d49cfc3d605cc2870c0e8', 'pipeline': 'e33538ab4b898714faabedeca7ca31fddc8556d9'}, 'duration': 0.19617605209350586, 'iteration': 8, 'loss': 0.36099071207430344, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6390092879256966, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', 'pipeline': '4b6c8e6319596576208d52f01c78f948f5eed60d'}, 'duration': 0.18809914588928223, 'iteration': 9, 'loss': 0.10006879944960434, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8999312005503957, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '243233c6aeff6ae2e302e2c69b8321223cc60572', 'pipeline': 'fa651d617590ca39e239701cf53d1fd5d96acea6'}, 'duration': 0.7406730651855469, 'iteration': 10, 'loss': 0.2665871173030616, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334128826969384, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3ae181ec7ae9577340db60926f367f71b5a509dd', 'pipeline': '8ee6aed7f845bdfe1dea0c46782908fbec30f696'}, 'duration': 0.16692304611206055, 'iteration': 11, 'loss': 0.2744431544547644, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7255568455452356, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '99954fd23d0716356ed307ed56a384982a54f997', 'pipeline': 'cf252756153f9e1e1be7e6bd4e3a2513ae2eb156'}, 'duration': 0.6621899604797363, 'iteration': 12, 'loss': 0.10068799449604404, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.899312005503956, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'pipeline': '99a8d9d387020a141f1a2a628cea6596451ecc7c'}, 'duration': 0.6634690761566162, 'iteration': 13, 'loss': 0.292608359133127, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.707391640866873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', 'pipeline': '9da4f445f45684463ebf21692e0650442a58c84a'}, 'duration': 0.1821901798248291, 'iteration': 14, 'loss': 0.027812177502580027, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.97218782249742, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '35dfb1ae9ddfc15cc70459befee51146343c17ba', 'pipeline': 'a9907c1ab20d1bf074623ca4d7d799be21d055a4'}, 'duration': 0.3444211483001709, 'iteration': 15, 'loss': 0.03833849329205363, 'max_history_score': 0.9725146198830409, 'max_history_score_std': 0.0370596012111225, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.9616615067079464, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'pipeline': 'c2523f03453187528efbff45ada534e1143f4d9e'}, 'duration': 0.1655139923095703, 'iteration': 16, 'loss': 0.02225662194702449, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9777433780529755, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b81f8630ed80bf499c67248325fe289f18505d10', 'pipeline': '1df55e490a1d2ff4943d0235bfd4dc229781e16f'}, 'duration': 0.7520039081573486, 'iteration': 17, 'loss': 0.26651186790505677, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.7334881320949432, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'pipeline': '13ea3359c453b8993fcec1e88bc0e19cd0a2b112'}, 'duration': 0.18940210342407227, 'iteration': 18, 'loss': 0.08833849329205368, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9116615067079463, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.16716504096984863, 'iteration': 19, 'loss': 0.055589955280357706, 'max_history_score': 0.9777433780529755, 'max_history_score_std': 0.0272938784642179, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9444100447196423, ...}, ...], 'history_hash': ['7cb9198e3b87b369788b861e5f4c53870943a884', '1643622f60bd6689991bf72fdccd9269b6322c7b', 'dbb31a09b26b8714d705059123ceaea2e97c2118', 'a92abdb82fffe3925f7c8e9bc73fde160ae6f6da', 'f6aac0ea7b5a75356fba603ddf1cab87a5848064', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '3546b4645feb8372afad2a44628b0deb1328e129', '22fbd423f01f74106f48d2f8ef18d94d2f68db5e', 'd48352570b5713401f8d49cfc3d605cc2870c0e8', '31f7b09264e49be7b2d7222bec8a1dcaf5996aec', '243233c6aeff6ae2e302e2c69b8321223cc60572', '3ae181ec7ae9577340db60926f367f71b5a509dd', '99954fd23d0716356ed307ed56a384982a54f997', 'a2ccd9dd026236faeedaebe1bbf12cb9b4905e56', 'd4284326ea4f87178fc72cd83d5b051f8f5b1576', '35dfb1ae9ddfc15cc70459befee51146343c17ba', '98a1d1105cc573141ef55a9f6d1d5c4f51effc65', 'b81f8630ed80bf499c67248325fe289f18505d10', '4664bb2c124eaa0fa8583c1d8018a43c0f7546b3', 'ad91fecc6d4230b68c476bff640c1cf583d55180', ...], 'history_index': {'0032ae0a43fdeb99d753f1626a050fad67b24699': 429, '0037ee5132ca188cd52fd0814d4ffc356bf97869': 366, '004d17e7cad1ff161b0dac48884a6f61615ee5b8': 324, '007f321e04e7474976b34ad46defc8d08c113efe': 422, '0141809cca967c79f92a6bcc99237896291e0ac5': 38, '0270863cee780de8b32de0192712a45262203ad1': 394, '030427b64da6e82ce0765f85df6bf46a26618b02': 403, '037bbe799325a90322963cf17788fe07cce3e63c': 358, '0447d37078836a2a5937b2f5cc994c52c0204250': 336, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 119, ...}, 'iteration': 438, 'max_history_score': 0.9833333333333334, 'max_history_score_std': 0.02545875386086579, 'max_history_step': 'algorithm'}, config={'algorithm': 'RandomForest', 'seed': 42, 'step_pipeline': 60, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:40:53 2019
PID: 26326                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...random_state=42, verbose=0, warm_start=False))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ... random_state=42, verbose=0, warm_start=False))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method RandomForestClassifier.fit of Rand...   random_state=42, verbose=0, warm_start=False)>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in fit(self=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None)
    328             trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
    329                              **_joblib_parallel_args(prefer='threads'))(
    330                 delayed(_parallel_build_trees)(
    331                     t, self, X, y, sample_weight, i, len(trees),
    332                     verbose=self.verbose, class_weight=self.class_weight)
--> 333                 for i, t in enumerate(trees))
        i = 99
    334 
    335             # Collect newly grown trees
    336             self.estimators_.extend(trees)
    337 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=1), iterable=<generator object <genexpr>>)
    912             # self._original_iterator is None, then this means either
    913             # that pre_dispatch == "all", n_jobs == 1 or that the first batch
    914             # was very quick and its callback already dispatched all the
    915             # remaining jobs.
    916             self._iterating = False
--> 917             if self.dispatch_one_batch(iterator):
        self.dispatch_one_batch = <bound method Parallel.dispatch_one_batch of Parallel(n_jobs=1)>
        iterator = <generator object <genexpr>>
    918                 self._iterating = self._original_iterator is not None
    919 
    920             while self.dispatch_one_batch(iterator):
    921                 pass

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self=Parallel(n_jobs=1), iterator=<generator object <genexpr>>)
    754                                  self._pickle_cache)
    755             if len(tasks) == 0:
    756                 # No more tasks available in the iterator: tell caller to stop.
    757                 return False
    758             else:
--> 759                 self._dispatch(tasks)
        self._dispatch = <bound method Parallel._dispatch of Parallel(n_jobs=1)>
        tasks = <sklearn.externals.joblib.parallel.BatchedCalls object>
    760                 return True
    761 
    762     def _print(self, msg, msg_args):
    763         """Display the message on stout or stderr depending on verbosity"""

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in _dispatch(self=Parallel(n_jobs=1), batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    711 
    712         dispatch_timestamp = time.time()
    713         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)
    714         with self._lock:
    715             job_idx = len(self._jobs)
--> 716             job = self._backend.apply_async(batch, callback=cb)
        job = undefined
        self._backend.apply_async = <bound method SequentialBackend.apply_async of <...lib._parallel_backends.SequentialBackend object>>
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
        cb = <sklearn.externals.joblib.parallel.BatchCompletionCallBack object>
    717             # A job can complete so quickly than its callback is
    718             # called before we get here, causing self._jobs to
    719             # grow. To ensure correct results ordering, .insert is
    720             # used (rather than .append) in the following line

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in apply_async(self=<sklearn.externals.joblib._parallel_backends.SequentialBackend object>, func=<sklearn.externals.joblib.parallel.BatchedCalls object>, callback=<sklearn.externals.joblib.parallel.BatchCompletionCallBack object>)
    177             raise ValueError('n_jobs == 0 in Parallel has no meaning')
    178         return 1
    179 
    180     def apply_async(self, func, callback=None):
    181         """Schedule a func to be run"""
--> 182         result = ImmediateResult(func)
        result = undefined
        func = <sklearn.externals.joblib.parallel.BatchedCalls object>
    183         if callback:
    184             callback(result)
    185         return result
    186 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/_parallel_backends.py in __init__(self=<sklearn.externals.joblib._parallel_backends.ImmediateResult object>, batch=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    544 
    545 class ImmediateResult(object):
    546     def __init__(self, batch):
    547         # Don't delay the application, to avoid keeping the input
    548         # arguments in memory
--> 549         self.results = batch()
        self.results = undefined
        batch = <sklearn.externals.joblib.parallel.BatchedCalls object>
    550 
    551     def get(self):
    552         return self.results
    553 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _parallel_build_trees>
        args = (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100)
        kwargs = {'class_weight': None, 'verbose': 0}
        self.items = [(<function _parallel_build_trees>, (DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), None, 0, 100), {'class_weight': None, 'verbose': 0})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/ensemble/forest.py in _parallel_build_trees(tree=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), forest=RandomForestClassifier(bootstrap=False, class_we...    random_state=42, verbose=0, warm_start=False), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, tree_idx=0, n_trees=100, verbose=0, class_weight=None)
    116         elif class_weight == 'balanced_subsample':
    117             curr_sample_weight *= compute_sample_weight('balanced', y, indices)
    118 
    119         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)
    120     else:
--> 121         tree.fit(X, y, sample_weight=sample_weight, check_input=False)
        tree.fit = <bound method DecisionTreeClassifier.fit of Deci...False, random_state=1608637542, splitter='best')>
        X = array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32)
        y = array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]])
        sample_weight = None
    122 
    123     return tree
    124 
    125 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...=False, random_state=1608637542, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=False, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.0 (0.0) [A]
Best score: 0.983333333333 (0.0254587538609) [A] | Score: 0.977777777778 (0.0368513865595) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "bootstrap": true, 
    "criterion": "entropy", 
    "max_depth": null, 
    "max_features": 1, 
    "max_leaf_nodes": null, 
    "min_samples_split": 3, 
    "n_estimators": 50
}
BEST SCORE: 0.983333333333 (0.0254587538609)
##################################################
