SCENARIO:
 {
    "control": {
        "seed": 42
    }, 
    "file_name": "dt_wine_adaptive", 
    "policy": {
        "initial_step_time": 15, 
        "reset_trial": false, 
        "reset_trials_after": 2
    }, 
    "setup": {
        "algorithm": "DecisionTree", 
        "dataset": "wine", 
        "policy": "adaptive", 
        "runtime": 300
    }, 
    "title": "Decision Tree on Wine with Adaptive policy"
}
## Data Pipeline
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.944042397661 (0.070312071923) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.726801685587 (0.0828562406684) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.851945734434 (0.0784050886423) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.704321465428 (0.0898872939361) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.916305469556 (0.0380320967844) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.884176126591 (0.102463586424) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.899597953216 (0.0954231671578) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.804865411077 (0.0985727909073) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.788418042656 (0.0874585977004) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.921820175439 (0.0617641287566) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.922480220158 (0.0562208779569) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.67431630547 (0.147368113975) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.57460870313 (0.102416956629) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.72720373237 (0.121067617315) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.878947368421 (0.0910873859012) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.760936962504 (0.148819427109) [P]
Best score: 0.944042397661 (0.070312071923) [P] | Score: 0.856105951152 (0.105574352656) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.944334795322 (0.0550424641413) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.939146886825 (0.0575022449535) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.932896886825 (0.0407779212169) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.932604489164 (0.041453742544) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.922078173375 (0.0549736938882) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.895321637427 (0.0796889579307) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.922112573099 (0.0613639984448) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.933556931545 (0.058947622263) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.848950808394 (0.0957335688742) [P]
Best score: 0.944334795322 (0.0550424641413) [P] | Score: 0.884100877193 (0.0915936620531) [P]
Best score: 0.949965600275 (0.0389185000234) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.949965600275 (0.0389185000234) [P] | Score: 0.932645338837 (0.0615858456632) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.950257997936 (0.0380647216643) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.927382180943 (0.0571826905791) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.911661506708 (0.0655336967951) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.944083247334 (0.0362241066736) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.944736842105 (0.0430420877674) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.748105865153 (0.0882976490633) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.90486756106 (0.0573727418435) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.877599329205 (0.0514263539872) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.906323099415 (0.0790981696108) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.938820089439 (0.0525497907586) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.933264533884 (0.0417396400551) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.817004213966 (0.11131151581) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.916563467492 (0.0671550758871) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.758670880633 (0.0901336702612) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.921820175439 (0.0565466502141) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.692808307534 (0.0783517830683) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.905847953216 (0.0932542278612) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.872370571035 (0.0679724085799) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.938527691778 (0.0398239925278) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.944048847609 (0.0570279095313) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.789439284486 (0.146513629395) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.911695906433 (0.090140086061) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.703592621259 (0.0610373121334) [P]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.662293601651 (0.0381874425316) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 3
        }
    ], 
    "normalizer": [
        "normalizer_PowerTransformer", 
        {}
    ], 
    "rebalance": [
        "rebalance_SMOTE", 
        {
            "rebalance__k_neighbors": 5
        }
    ]
}
BEST ALGO CONFIG:
 {}
BEST SCORE: 0.950257997936 (0.0380647216643)
##################################################
--> [POLICY ACTION] DOUBLE TIME FOR PIPELINE from 15s to 30s.
## Algorithm
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.472095373237 (0.0854046922918) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.712839697282 (0.117449676013) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.700227898177 (0.173555568503) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.641234520124 (0.109395931147) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.938820089439 (0.0679215161832) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.483206484348 (0.0639288963504) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.664955280358 (0.109165918649) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.701360939112 (0.124484162332) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.66898004816 (0.0889190172397) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.747299621603 (0.203993454167) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.494644392845 (0.0681827353796) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.938527691778 (0.0586327743903) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.623295063639 (0.0896469694582) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.483206484348 (0.080969374402) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.884468524252 (0.0730989720539) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.634406174751 (0.0874206373935) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.635752063983 (0.213469933789) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.656486498108 (0.051232401375) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.916305469556 (0.0574307603787) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.617705108359 (0.091496369204) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.94993120055 (0.0463219757223) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.938527691778 (0.0531085518734) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.944083247334 (0.0439257311256) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.674133556932 (0.0394945626219) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.616535517716 (0.060760927137) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.616535517716 (0.060760927137) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.944083247334 (0.0439257311256) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.921861025112 (0.0671268146317) [A]
Best score: 0.950257997936 (0.0380647216643) [P] | Score: 0.921861025112 (0.0515185150286) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.955194358445 (0.0493084538174) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.938527691778 (0.0531085518734) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.938527691778 (0.0469386230249) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.686885104919 (0.0895764676711) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.944083247334 (0.0562497800543) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.692733058136 (0.104556338393) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.944375644995 (0.0432109155042) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.494317595459 (0.0746404993043) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.944083247334 (0.0439257311256) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.944083247334 (0.0562497800543) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.6439499484 (0.195089605189) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.94963880289 (0.0470240463372) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.668578001376 (0.0503770548214) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.55542870657 (0.185260022138) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.668687650499 (0.0779904546392) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.955194358445 (0.0493084538174) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.884176126591 (0.09940574728) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.718395252838 (0.105309233676) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.921861025112 (0.0515185150286) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.922153422773 (0.0667586553039) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.669857241142 (0.105576283671) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.763166494668 (0.124282868818) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.623329463364 (0.0564584959739) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.674828001376 (0.0559100629161) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.718395252838 (0.124141138837) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.944083247334 (0.0562497800543) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.944083247334 (0.0504653723412) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.680383556932 (0.0455901690614) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.639858531132 (0.179324493889) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.779506363949 (0.116993183688) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.94963880289 (0.0470240463372) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.664301685587 (0.112668310452) [A]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.635646714826 (0.0904669765708) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 3
        }
    ], 
    "normalizer": [
        "normalizer_PowerTransformer", 
        {}
    ], 
    "rebalance": [
        "rebalance_SMOTE", 
        {
            "rebalance__k_neighbors": 5
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "gini", 
    "max_depth": 1, 
    "max_features": 2, 
    "max_leaf_nodes": 3, 
    "min_samples_leaf": 2, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.955194358445 (0.0493084538174)
##################################################
--> [POLICY ACTION] DOUBLE TIME FOR ALGORITHM from 15s to 30s.
## Data Pipeline
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.917251461988 (0.0711560386315) [P]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.816195820433 (0.0812090975335) [P]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.938493292054 (0.0643649646432) [P]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.764920880633 (0.103307428387) [P]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.927416580667 (0.0506515360022) [P]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.895211988304 (0.0844853507826) [P]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.746314929481 (0.0757194421795) [P]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.938854489164 (0.0580149727018) [P]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.94441004472 (0.0351637547359) [P]
Best score: 0.955194358445 (0.0493084538174) [A] | Score: 0.872772617819 (0.0891548376319) [P]
Best score: 0.955847953216 (0.0543804625274) [P] | Score: 0.955847953216 (0.0543804625274) [P]
Best score: 0.955847953216 (0.0543804625274) [P] | Score: 0.8282249742 (0.0988301773708) [P]
Best score: 0.955847953216 (0.0543804625274) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.955847953216 (0.0543804625274) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.955847953216 (0.0543804625274) [P] | Score: 0.932972136223 (0.0604138917319) [P]
Best score: 0.955847953216 (0.0543804625274) [P] | Score: 0.613497592019 (0.11011178628) [P]
Best score: 0.955847953216 (0.0543804625274) [P] | Score: 0.944736842105 (0.0608643834375) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.954534313725 (0.0487157144722) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.816787065703 (0.107698880139) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.857208892329 (0.0797267133787) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.87306501548 (0.101343977136) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856037151703 (0.110243363022) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921499828001 (0.0693042283806) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94441004472 (0.0497097329339) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950292397661 (0.0523873475648) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955521155831 (0.0484599339307) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.805742604059 (0.154521677674) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.777238132095 (0.0763014268294) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.573920708634 (0.134787114925) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94897875817 (0.0463230431036) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0522654088808) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.911042311662 (0.0567505178839) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.816787065703 (0.107698880139) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8112250602 (0.0799829434184) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.850440746474 (0.075261235524) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0660971466567) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.844926040592 (0.100327143859) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877599329205 (0.0514263539872) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0501184039547) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921499828001 (0.0693042283806) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856105951152 (0.129234281421) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.886812005504 (0.0449301265667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0457445332895) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878149724802 (0.0965893105874) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.63681630547 (0.129522344136) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950292397661 (0.0523873475648) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.659984520124 (0.123553257748) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.870880632955 (0.089422911695) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955847953216 (0.0543804625274) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0900961893662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.785898262814 (0.0906902696026) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.560317767458 (0.153720014234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.895614035088 (0.0930546080721) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927416580667 (0.0506515360022) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949346405229 (0.047046340029) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.651911334709 (0.0756230306195) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927743378053 (0.0433992066492) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938820089439 (0.0390757291364) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.945029239766 (0.0490635956145) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.90515995872 (0.062205803354) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.95522875817 (0.0485170314967) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.748105865153 (0.0882976490633) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0299560627161) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932570089439 (0.0416054104192) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.873942208462 (0.106303650428) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.815099329205 (0.0540496135642) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.89993120055 (0.0737652670683) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.665540075679 (0.132171415981) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900842793258 (0.0671855885652) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0900961893662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939439284486 (0.0564255347241) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686925954592 (0.0996270767814) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.879239766082 (0.10568507063) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.888050395597 (0.0417782818859) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.89332000344 (0.0643286540993) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.725262297902 (0.12271707686) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938486842105 (0.0678219293354) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.788968438252 (0.0773293476219) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.905744754042 (0.0779081243003) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.911007911937 (0.062132997769) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900223598211 (0.0810934551673) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93293128655 (0.0647619668046) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.862211902305 (0.0966753897818) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.822342621259 (0.112596438352) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.937833247334 (0.0397752805973) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944375644995 (0.0556933669295) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93293128655 (0.0647619668046) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.720626934985 (0.0802250850929) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.50232628139 (0.137264216149) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {}
BEST SCORE: 0.966632266942 (0.0368981749401)
##################################################
--> [POLICY ACTION] DOUBLE TIME FOR PIPELINE from 30s to 60s.
## Algorithm
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.92138372893 (0.0614543166272) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, '07b63f0cfaed7ed5960771b7a335bc0c99ccc7e8': 101, ...}, 'iteration': 238, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, '07b63f0cfaed7ed5960771b7a335bc0c99ccc7e8': 101, ...}, 'iteration': 238, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, '07b63f0cfaed7ed5960771b7a335bc0c99ccc7e8': 101, ...}, 'iteration': 238, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:39 2019
PID: 21357                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910096319229 (0.077871702225) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.945029239766 (0.0490635956145) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.961076711386 (0.0500306746245) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, '07b63f0cfaed7ed5960771b7a335bc0c99ccc7e8': 101, ...}, 'iteration': 242, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, '07b63f0cfaed7ed5960771b7a335bc0c99ccc7e8': 101, ...}, 'iteration': 242, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, '07b63f0cfaed7ed5960771b7a335bc0c99ccc7e8': 101, ...}, 'iteration': 242, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:41 2019
PID: 21402                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, '07b63f0cfaed7ed5960771b7a335bc0c99ccc7e8': 101, ...}, 'iteration': 244, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, '07b63f0cfaed7ed5960771b7a335bc0c99ccc7e8': 101, ...}, 'iteration': 244, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, '07b63f0cfaed7ed5960771b7a335bc0c99ccc7e8': 101, ...}, 'iteration': 244, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:43 2019
PID: 21440                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0727492289959) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 248, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 248, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 248, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:45 2019
PID: 21479                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.928035775714 (0.0348349828487) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861592707258 (0.0985392125866) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 254, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 254, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 254, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:47 2019
PID: 21515                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861592707258 (0.0985392125866) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 260, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 260, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 260, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:49 2019
PID: 21554                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938820089439 (0.0525497907586) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 264, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 264, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 264, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:51 2019
PID: 21591                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.57881621947 (0.0388318016613) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 267, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 267, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 267, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:53 2019
PID: 21630                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939146886825 (0.0381399570378) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939146886825 (0.0381399570378) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.915978672171 (0.068300402375) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 277, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 277, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 277, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:55 2019
PID: 21667                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0629780983098) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.961076711386 (0.0500306746245) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 281, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 281, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0949411392211914, 'iteration': 136, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 281, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:02:57 2019
PID: 21730                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.747377020984 (0.0858038822643) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 303, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 303, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 303, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:03:02 2019
PID: 21766                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 308, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 308, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 308, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:03:04 2019
PID: 21804                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 314, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 314, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 314, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:03:06 2019
PID: 21844                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 86
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775721, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 317, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 317, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, '05380170ba8938917726ec882a5cf1798ba96137': 48, '072e0686994c6feacdad7638d35c65d11c973aeb': 9, ...}, 'iteration': 317, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:03:08 2019
PID: 21882                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 3, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
--> [POLICY ACTION] DOUBLE TIME FOR ALGORITHM from 30s to 60s.
## Data Pipeline
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.8674750602 (0.103962298585) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.938235294118 (0.0585952360104) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.736483058136 (0.0674010727018) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.659984520124 (0.123553257748) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.916305469556 (0.0673265188385) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.915611025112 (0.0670680140389) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944736842105 (0.0702783115368) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.949890350877 (0.0289746985772) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.927048933609 (0.0556704894109) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.877599329205 (0.0514263539872) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.945029239766 (0.0490635956145) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.921820175439 (0.0565466502141) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.877382180943 (0.0744655305035) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0501184039547) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922112573099 (0.0613639984448) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.70911377709 (0.0693363406733) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.659984520124 (0.133171105359) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.856105951152 (0.105574352656) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.856363949088 (0.094732634166) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.754940660475 (0.119007593733) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.932277691778 (0.0234909573552) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944736842105 (0.0657400724205) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922112573099 (0.0613639984448) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.911007911937 (0.062132997769) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.717481510148 (0.110759802032) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922807017544 (0.0751205954517) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.729211816305 (0.10880121415) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.840024079807 (0.0854178987485) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.856105951152 (0.105574352656) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.894483144135 (0.0868166833929) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.921200980392 (0.0615355143746) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.873357413141 (0.0971738661075) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.844994840041 (0.0918810403146) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.889404884761 (0.0685277141406) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.893973598211 (0.0566689522237) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933625730994 (0.0416612800458) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.910681114551 (0.0637486419726) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.741855865153 (0.0698138585243) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.809141726866 (0.0559679406231) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.916557017544 (0.0709207591634) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.631335999312 (0.0983972404076) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.856363949088 (0.094732634166) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.93845244238 (0.028885202632) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.904540763674 (0.0772019037944) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.692120313037 (0.080858508992) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.894668042656 (0.079765804157) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.884032077743 (0.0915480078219) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.832064843481 (0.112526058097) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.757535689714 (0.0687902102728) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960382266942 (0.0260510498841) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.570919332645 (0.118351708342) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.856363949088 (0.094732634166) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.911695906433 (0.0752070429721) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.850842793258 (0.107436618902) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.833488132095 (0.081540897897) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816787065703 (0.107698880139) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.910709064327 (0.0752178508064) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944668042656 (0.0485668838841) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.905119109047 (0.0490937548859) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.873030615755 (0.0836832186313) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.938486842105 (0.0678219293354) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.967251461988 (0.0434444283073) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.906398348813 (0.0767686643769) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.775883642931 (0.0880192226515) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.798800309598 (0.115674503746) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.950584795322 (0.0379993232225) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.927708978328 (0.0501302109697) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.867509459924 (0.0955928384483) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.910674664603 (0.0611735781876) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.775924492604 (0.110791809956) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.754355865153 (0.0978276441826) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.669455194358 (0.172228293635) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939473684211 (0.0575221337297) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.8612250602 (0.0761541632214) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.872772617819 (0.0891548376319) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933591331269 (0.0478628906347) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944042397661 (0.0609033624431) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.967251461988 (0.0356389449946) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.760059769522 (0.0899892422619) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.815466976264 (0.0981034362328) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.878620571035 (0.103557714803) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.867801857585 (0.0764477754783) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.927375730994 (0.0499210806545) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.792917956656 (0.0885749588356) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.905813553492 (0.0607789306213) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.906323099415 (0.0829084096241) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.900550395597 (0.0531546324173) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.917217062264 (0.0608451325573) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933189284486 (0.0464877464968) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.781731596147 (0.0543227440769) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.82102253182 (0.0873581207132) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.889656432749 (0.0865205694318) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.878620571035 (0.0873943965141) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.794816391469 (0.0841229533223) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.932896886825 (0.0477506315078) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.867182662539 (0.0890441311846) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.945029239766 (0.0549956395112) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.770476436189 (0.0928650695792) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922480220158 (0.0614660155603) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.657649638803 (0.135275679523) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.899965600275 (0.0736950660357) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933591331269 (0.0478628906347) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.884502923977 (0.108496869723) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.920472136223 (0.0390965454729) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.94470244238 (0.0423237031928) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.652496130031 (0.0849603784766) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.900257997936 (0.0691172334862) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922112573099 (0.0503087706459) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.782133642931 (0.0855691686199) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.93816004472 (0.0388646581966) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.740112229102 (0.110925931997) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.701474888201 (0.101166553226) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.894048847609 (0.0771980334091) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961076711386 (0.0255189449534) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.775371947024 (0.101265572279) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.792842707258 (0.0579389769853) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933591331269 (0.040909318612) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.895252837977 (0.0812193456552) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.627536979704 (0.127210216039) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.911369109047 (0.0663406987222) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922772617819 (0.0742765259258) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 3, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
--> [POLICY ACTION] DIVIDE TIME FOR PIPELINE from 60s to 30s.
## Algorithm
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, ...}, 'iteration': 459, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, ...}, 'iteration': 459, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, ...}, 'iteration': 459, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:09 2019
PID: 21918                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, ...}, 'iteration': 463, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, ...}, 'iteration': 463, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, '02f0a9668b9a484df3dff337c4958f014c44b94a': 168, '04d674a716af0c2d0661b88957ad06e6be5f8d80': 142, ...}, 'iteration': 463, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:11 2019
PID: 21955                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 471, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 471, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 471, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:14 2019
PID: 21996                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 478, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 478, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 478, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:16 2019
PID: 22033                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 483, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 483, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 483, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:18 2019
PID: 22069                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.725447196422 (0.0639956153132) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 490, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 490, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 490, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:21 2019
PID: 22107                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.93388372893 (0.0394227600048) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 498, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 498, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 498, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:24 2019
PID: 22146                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 502, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 502, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 502, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:26 2019
PID: 22185                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922772617819 (0.0425828439622) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.7532249742 (0.0916055794586) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 512, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 512, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 512, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:29 2019
PID: 22221                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 518, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 518, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 518, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:32 2019
PID: 22262                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922772617819 (0.0425828439622) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.7532249742 (0.0916055794586) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 527, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 527, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 527, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:35 2019
PID: 22299                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861919504644 (0.0807899636139) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 530, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 530, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 530, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:37 2019
PID: 22336                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 539, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 539, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 539, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:40 2019
PID: 22375                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0501184039547) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 543, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 543, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 543, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:42 2019
PID: 22412                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 548, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 548, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 204, ...}, 'iteration': 548, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:44 2019
PID: 22452                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.843863949088 (0.060853931263) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960416666667 (0.0560782700923) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961001461988 (0.0427741057861) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961001461988 (0.0427741057861) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 563, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 563, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 563, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:48 2019
PID: 22488                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.894960440316 (0.0704846940523) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 567, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 567, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 567, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:50 2019
PID: 22528                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 573, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 573, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 573, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:53 2019
PID: 22564                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933591331269 (0.040909318612) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861592707258 (0.0985392125866) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 584, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 584, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 584, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:04:57 2019
PID: 22604                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.872738218094 (0.101487276152) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 596, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 596, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 596, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:01 2019
PID: 22642                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.758488132095 (0.0889630361145) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 603, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 603, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 603, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:03 2019
PID: 22677                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.675488046096 (0.0782974489207) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 274
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775533, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 610, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 610, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 610, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:06 2019
PID: 22716                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.57881621947 (0.0388318016613) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 3, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
--> [POLICY ACTION] DIVIDE TIME FOR ALGORITHM from 60s to 30s.
## Data Pipeline
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.889656432749 (0.0865205694318) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.817004213966 (0.114050591856) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.81038871689 (0.117905908595) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.696940574475 (0.0767155562764) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.889439284486 (0.0777658183516) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.916849415205 (0.0655973579786) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.871166580667 (0.07831142167) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.888342793258 (0.0586619394693) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.873357413141 (0.0905990747913) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.877926126591 (0.0754907075181) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.782133642931 (0.0925021649451) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.950257997936 (0.0380647216643) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.899965600275 (0.0922896663289) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.921861025112 (0.0376774400606) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.81477253182 (0.0817985418676) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.693433952528 (0.107380025597) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.89470244238 (0.0909269648097) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.895287237702 (0.0859862666404) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.792842707258 (0.0579389769853) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.719605693154 (0.0743349033922) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.883264533884 (0.0944810861054) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.792842707258 (0.0579389769853) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.709148176815 (0.0648870311889) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.719197196422 (0.0952804431116) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.884176126591 (0.102463586424) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.911661506708 (0.0606414170763) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.727018833849 (0.101813432147) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.720586085311 (0.0487018861408) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.911007911937 (0.0755801644852) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933223684211 (0.0689610852097) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.804757911937 (0.0822636163868) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.803661420709 (0.0655990133602) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.811448658411 (0.108946375431) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.707800137599 (0.0605041685643) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.675412796698 (0.0763748850632) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 3, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
--> [POLICY ACTION] DIVIDE TIME FOR PIPELINE from 30s to 15s.
## Algorithm
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 652, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 652, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 652, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:39 2019
PID: 22753                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 660, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 660, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 660, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:42 2019
PID: 22791                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961076711386 (0.0500306746245) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 669, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 669, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 669, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:45 2019
PID: 22829                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.758488132095 (0.0889630361145) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 681, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 681, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 681, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:50 2019
PID: 22868                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.675488046096 (0.0782974489207) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939146886825 (0.0381399570378) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 685, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 685, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 685, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:53 2019
PID: 22908                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861592707258 (0.0985392125866) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 687, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 687, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 687, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:55 2019
PID: 22944                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.954534313725 (0.0487157144722) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 692, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 692, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 692, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:05:57 2019
PID: 22981                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933591331269 (0.0539271754362) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961076711386 (0.0500306746245) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 698, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 698, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 698, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:06:00 2019
PID: 23020                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.747377020984 (0.0858038822643) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 703, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 703, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 703, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:06:03 2019
PID: 23059                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.950257997936 (0.0454555495621) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 708, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 708, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 708, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:06:05 2019
PID: 23098                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 30
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=30, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 718
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775089, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 710, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 710, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, '029067f31f45675f0832f714e1d67c883ce4cadc': 468, ...}, 'iteration': 710, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:06:08 2019
PID: 23134                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 3, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
--> [POLICY ACTION] DIVIDE TIME FOR ALGORITHM from 30s to 15s.
## Data Pipeline
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.921458978328 (0.0366562249878) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.867509459924 (0.0955928384483) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.905452356381 (0.0503209922442) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.90701754386 (0.0936658836868) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.915611025112 (0.0715220417615) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944083247334 (0.0439257311256) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961695906433 (0.0424420014154) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.746314929481 (0.0939140760327) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.717808307534 (0.0809957710523) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.955445906433 (0.0325084737252) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.680669504644 (0.118078180498) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.703919418645 (0.07779398253) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.898834709322 (0.0644659528998) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 3, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
## Algorithm
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944007997936 (0.0343323536854) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 15
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 947
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854774860, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 730, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 730, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 730, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:06:26 2019
PID: 23171                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861919504644 (0.0807899636139) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 15
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 947
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854774860, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 733, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 733, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 733, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:06:28 2019
PID: 23209                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 15
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 947
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854774860, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 736, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 736, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 736, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:06:30 2019
PID: 23247                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861919504644 (0.0807899636139) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 15
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 947
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854774860, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 754, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 754, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 754, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:06:39 2019
PID: 23285                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 3, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
## Data Pipeline
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.955445906433 (0.040915581562) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.938527691778 (0.0531085518734) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.759365325077 (0.103958396125) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.872738218094 (0.0773219216426) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.738566391469 (0.0907518358886) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.877743378053 (0.101821930282) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.916924664603 (0.0665513776021) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.657759287926 (0.0595288906017) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.792842707258 (0.0579389769853) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933516081871 (0.0527690825847) [P]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.707649638803 (0.132767233091) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 3, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
## Algorithm
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.758488132095 (0.0889630361145) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.950257997936 (0.0380647216643) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939146886825 (0.0381399570378) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.950257997936 (0.0454555495621) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961001461988 (0.0427741057861) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960416666667 (0.0560782700923) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.910096319229 (0.077871702225) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 15
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 1091
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854774716, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 791, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 791, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 791, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:07:01 2019
PID: 23326                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.915978672171 (0.068300402375) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933591331269 (0.040909318612) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.8674750602 (0.0766151938079) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 15
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 1091
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854774716, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 797, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 797, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 797, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:07:03 2019
PID: 23362                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 15
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 1091
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854774716, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 801, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 801, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 801, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:07:07 2019
PID: 23400                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...'./scenarios/dt_wine_adaptive.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Adaptive.run of <experiment.policies.adaptive.Adaptive object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/adaptive.py in run(self=<experiment.policies.adaptive.Adaptive object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
    138                     algo=tpe.suggest, 
    139                     max_evals=None,
    140                     max_time=self.current_steptime['algorithm'],
    141                     trials=trials_algo,
    142                     show_progressbar=False,
--> 143                     verbose=0
    144                 )
    145             except Exception as e:
    146                 pass
    147             best_config = self.context['best_config']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 15
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=15, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 1091
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854774716, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 804, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 804, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'b225250754792bd81087526f3704b2946ef8b3cf', 'config': '2eb6fda9ade13e723b2b6c2976f60a2cca304a05', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 1.3118388652801514, 'iteration': 283, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8dadbd38d83057199a79309d43a4ed1b25e992cd', 'pipeline': 'd4dd89969bee764155a86fb931d789f8e997d5d3'}, 'duration': 0.09780478477478027, 'iteration': 0, 'loss': 0.055957602339181234, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9440423976608188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', 'pipeline': 'de1f56cc08235d9f5ae1342721c7be9bcbcb306a'}, 'duration': 0.09103608131408691, 'iteration': 1, 'loss': 0.27319831441348463, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.7268016855865154, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'pipeline': '2223b749da26c2ea40bc0eac13791c0eb5509cba'}, 'duration': 0.6402888298034668, 'iteration': 2, 'loss': 0.14805426556587553, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.8519457344341245, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', 'pipeline': 'ff2d50308e0dd64289662e2d30be189aa4ff5cf5'}, 'duration': 0.6767230033874512, 'iteration': 3, 'loss': 0.29567853457172355, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7043214654282764, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '490c77f6bd8042414ae8690da127cc394657e40a', 'pipeline': 'd30c22280db23508f9f99cdf62c130ded82daa09'}, 'duration': 0.18966984748840332, 'iteration': 4, 'loss': 0.08369453044375652, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '89182bb161af21adf7fe6c6841ecccc074baa87d', 'pipeline': '7cb4615e889556871dfe8055447b694a94a343a7'}, 'duration': 0.20044493675231934, 'iteration': 5, 'loss': 0.12108703130374965, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', 'pipeline': 'b37ee32d59413053bf9a2a72c8ff7135f3701e05'}, 'duration': 0.07136392593383789, 'iteration': 6, 'loss': 0.11582387340901268, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8841761265909873, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', 'pipeline': 'b94a1e7f65534e1bb18af27059a1713b2edba2de'}, 'duration': 0.07828712463378906, 'iteration': 7, 'loss': 0.10040204678362574, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8995979532163743, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', 'pipeline': '1f794a340bb9c13d84478f56a07e6f1b4700c744'}, 'duration': 0.07693791389465332, 'iteration': 8, 'loss': 0.1951345889232886, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8048654110767114, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '072e0686994c6feacdad7638d35c65d11c973aeb', 'pipeline': '15ff3d6270ac899763bb3f72417c48bcd56aa7d8'}, 'duration': 0.0670919418334961, 'iteration': 9, 'loss': 0.11761480908152733, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '34eb1ea519666c26807af78bfa16f3b09609edf8', 'pipeline': '7bc76baa02ea9e6d2a38a826b2755540d8bef7e4'}, 'duration': 0.08161687850952148, 'iteration': 10, 'loss': 0.21158195734434115, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7884180426556588, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'bdae84ba99c7c81ca875199abce2090420399984', 'pipeline': 'eef79c17210d7e7f39eb783a69b06d0e791ce47d'}, 'duration': 0.0811929702758789, 'iteration': 11, 'loss': 0.0781798245614036, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9218201754385964, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', 'pipeline': '19bdf19a2eec5febce95ab8fa2a71040d75114aa'}, 'duration': 0.09855198860168457, 'iteration': 12, 'loss': 0.07751977984176128, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9224802201582387, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.056053876876831055, 'iteration': 13, 'loss': 0.32568369453044377, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', 'pipeline': 'd8d5a99006d943ff4db6a09eb210e74890ac5984'}, 'duration': 0.09793996810913086, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '021eeabaf291640b62d99c37a4b004ad5831e1b4', 'pipeline': 'e1727ee07547fd940ff83471d0e72fa3aa643333'}, 'duration': 0.07179999351501465, 'iteration': 15, 'loss': 0.42539129686962496, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.574608703130375, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.20822906494140625, 'iteration': 16, 'loss': 0.272796267629859, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.727203732370141, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', 'pipeline': 'bb2ea8eec6de7abd85dd53dc89ca46f5bd00020f'}, 'duration': 0.05212283134460449, 'iteration': 17, 'loss': 0.1210526315789473, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8789473684210527, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6ccf82937c2489405a96f3626808c9b5907fdbc6', 'pipeline': '688d7311bc3876d9310cbda7c4f81d89012930c4'}, 'duration': 0.7222399711608887, 'iteration': 18, 'loss': 0.23906303749570001, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7609369625043, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6bbf6a293d693eb359cc33e09b9b895afed98407', 'pipeline': '9cd56f0174dd4c5e0bfc54c579075407f4db9854'}, 'duration': 0.07488608360290527, 'iteration': 19, 'loss': 0.14389404884760926, 'max_history_score': 0.9440423976608188, 'max_history_score_std': 0.0703120719230117, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8561059511523907, ...}, ...], 'history_hash': ['8dadbd38d83057199a79309d43a4ed1b25e992cd', '5cd14d79d5b351d5c17b43bd4f382e95fd70de7f', '69e53a27f2b6fedb4a6e3f22260c0abcf1fb18b0', 'da9b64fa9a1624684d2d87e35ff86b797bd2bcb1', '490c77f6bd8042414ae8690da127cc394657e40a', '89182bb161af21adf7fe6c6841ecccc074baa87d', '9d1ddf70fc477c932c33f3bd0425cb038bf1ef1a', '2a9c1bf5112252cdfcd231fed23d8b84d99bbd54', '7f097fe5fa88c776ef9d406ecd42bd73c2d4e0c0', '072e0686994c6feacdad7638d35c65d11c973aeb', '34eb1ea519666c26807af78bfa16f3b09609edf8', 'bdae84ba99c7c81ca875199abce2090420399984', 'f42a8a8c1f65b49a48b534b6ee75c49dd4fa3ea5', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'b6345cb1c5f76e3b075641cf4c41ad21df0a6462', '021eeabaf291640b62d99c37a4b004ad5831e1b4', '7d0240b64f11f6eba3e28c4ba37e80383cc0809e', 'acec6865c8cfbe22cd1bfbc4c0d418fa16604d74', '6ccf82937c2489405a96f3626808c9b5907fdbc6', '6bbf6a293d693eb359cc33e09b9b895afed98407', ...], 'history_index': {'00467e6525af5a0c61dc8e775eb4924f6763e30b': 401, '0062606fce9e8fadb7220c4d5de050d21dd8b315': 88, '00a653c57e06da4c65a353712ce052414e2dc798': 721, '010e96682adcdaf7f072af6e58db02cb85414fb0': 156, '017164c3faedc2ac05c6d410ae5287bdadaf916d': 434, '018bc51fb75d075700c11fa6d8f448492caf4595': 554, '01db7a84227f5f459420a75825b820774395438e': 246, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 41, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 15, '028a5507e308afff54e1e3ad09923d0464f1b519': 465, ...}, 'iteration': 804, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'initial_step_time': 15, 'reset_trial': False, 'reset_trials_after': 2, 'seed': 42, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 10:07:10 2019
PID: 23438                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 3, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
