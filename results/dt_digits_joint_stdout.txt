SCENARIO:
 {
    "control": {
        "seed": 42
    }, 
    "file_name": "dt_digits_joint", 
    "policy": null, 
    "setup": {
        "algorithm": "DecisionTree", 
        "dataset": "digits", 
        "policy": "joint", 
        "runtime": 300
    }, 
    "title": "Decision Tree on Digits with Joint policy"
}
Best score: 0.2390315484 (0.0324793131561) [J] | Score: 0.2390315484 (0.0324793131561) [J]
Best score: 0.259201655514 (0.0134294907955) [J] | Score: 0.259201655514 (0.0134294907955) [J]
Best score: 0.259201655514 (0.0134294907955) [J] | Score: 0.190337928084 (0.00491858201779) [J]
Best score: 0.344463625029 (0.0565410047532) [J] | Score: 0.344463625029 (0.0565410047532) [J]
Best score: 0.344463625029 (0.0565410047532) [J] | Score: 0.233943316068 (0.0311281057595) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.420526391984 (0.0426012092367) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.211699841841 (0.0444865879674) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_digits_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 1, 'min_samples_split': 2, 'normalizer': 2, 'rebalance': 2, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 1, 'min_samples_split': 2, 'normalizer': 2, 'rebalance': 2, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34'], 'history_index': {'2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, '328918e747be982da02f8f9a41e757adea6cd69f': 1, '3c06701d03094fd5f9963633bce5d66eeab6ea34': 6, '5472962b0d30ab052475cb002e19a264f84ee7dd': 3, '5c4c25a8467ccee9465d2451393a7bcec1206e2c': 5, 'ffe808ec38f967142916be29896acc818f839e3c': 2}, 'iteration': 6, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}}
        algorithm = 'DecisionTree'
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        context = {'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34'], 'history_index': {'2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, '328918e747be982da02f8f9a41e757adea6cd69f': 1, '3c06701d03094fd5f9963633bce5d66eeab6ea34': 6, '5472962b0d30ab052475cb002e19a264f84ee7dd': 3, '5c4c25a8467ccee9465d2451393a7bcec1206e2c': 5, 'ffe808ec38f967142916be29896acc818f839e3c': 2}, 'iteration': 6, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34'], 'history_index': {'2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, '328918e747be982da02f8f9a41e757adea6cd69f': 1, '3c06701d03094fd5f9963633bce5d66eeab6ea34': 6, '5472962b0d30ab052475cb002e19a264f84ee7dd': 3, '5c4c25a8467ccee9465d2451393a7bcec1206e2c': 5, 'ffe808ec38f967142916be29896acc818f839e3c': 2}, 'iteration': 6, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 13:21:38 2019
PID: 22306                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), scorer={'score': <function _passthrough_scorer>}, train=array([ 169,  176,  178, ..., 1794, 1795, 1796]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y_train = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([9, 5, 0, ..., 8, 9, 8]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[ 0.8955434 ],
       [-0.20954931],
    ...27],
       [ 0.38132398],
       [-1.47904027]])
        yt = array([0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 0.8955434 ],
       [-0.20954931],
    ...27],
       [ 0.38132398],
       [-1.47904027]]), y=array([0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 0.8955434 ],
       [-0.20954931],
    ....381324  ],
       [-1.4790403 ]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [1...    [9.],
       [9.],
       [9.],
       [9.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.0 (0.0) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.106816960048 (0.0219643586863) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.389255882398 (0.0489365996909) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.0968163392773 (0.00179561960358) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.268237442728 (0.0222557306045) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.0968163392773 (0.00179561960358) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.229284159554 (0.0397947785317) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.113783424505 (0.0270955257314) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.226987622721 (0.0260209250011) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.311017391228 (0.0369254487969) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.221745255079 (0.0469729344201) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_digits_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'normalizer': 3, 'rebalance': 0, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'normalizer': 3, 'rebalance': 0, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05'], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '1a6edd938f22c40624299d64727fa33d11b70f87': 14, '2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, '328918e747be982da02f8f9a41e757adea6cd69f': 1, '32956a1193fbc87dae2c2eef811fad50f783e210': 10, '3c06701d03094fd5f9963633bce5d66eeab6ea34': 6, '5472962b0d30ab052475cb002e19a264f84ee7dd': 3, '5c4c25a8467ccee9465d2451393a7bcec1206e2c': 5, ...}, 'iteration': 17, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}}
        algorithm = 'DecisionTree'
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        context = {'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05'], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '1a6edd938f22c40624299d64727fa33d11b70f87': 14, '2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, '328918e747be982da02f8f9a41e757adea6cd69f': 1, '32956a1193fbc87dae2c2eef811fad50f783e210': 10, '3c06701d03094fd5f9963633bce5d66eeab6ea34': 6, '5472962b0d30ab052475cb002e19a264f84ee7dd': 3, '5c4c25a8467ccee9465d2451393a7bcec1206e2c': 5, ...}, 'iteration': 17, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05'], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '1a6edd938f22c40624299d64727fa33d11b70f87': 14, '2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, '328918e747be982da02f8f9a41e757adea6cd69f': 1, '32956a1193fbc87dae2c2eef811fad50f783e210': 10, '3c06701d03094fd5f9963633bce5d66eeab6ea34': 6, '5472962b0d30ab052475cb002e19a264f84ee7dd': 3, '5c4c25a8467ccee9465d2451393a7bcec1206e2c': 5, ...}, 'iteration': 17, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 13:22:08 2019
PID: 22400                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), scorer={'score': <function _passthrough_scorer>}, train=array([ 169,  176,  178, ..., 1794, 1795, 1796]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y_train = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([9, 5, 0, ..., 8, 9, 8]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-0.9609388 ,  0.85576859],
       [-0.27... 0.84930777],
       [-0.04169897,  0.24884504]])
        yt = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-0.9609388 ,  0.85576859],
       [-0.27... 0.84930777],
       [-0.04169897,  0.24884504]]), y=array([9, 5, 0, ..., 8, 9, 8]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-0.9609388 ,  0.8557686 ],
       [-0.27...      [-0.04169897,  0.24884504]], dtype=float32), y=array([[9.],
       [5.],
       [0.],
       ...,
       [8.],
       [9.],
       [8.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.0 (0.0) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.275332162102 (0.0206170428587) [J]
Best score: 0.420526391984 (0.0426012092367) [J] | Score: 0.191946455874 (0.00643029518029) [J]
Best score: 0.433995880647 (0.0200921812047) [J] | Score: 0.433995880647 (0.0200921812047) [J]
Best score: 0.433995880647 (0.0200921812047) [J] | Score: 0.420526391984 (0.0426012092367) [J]
Best score: 0.433995880647 (0.0200921812047) [J] | Score: 0.402551157475 (0.0438930043392) [J]
Best score: 0.433995880647 (0.0200921812047) [J] | Score: 0.376752898958 (0.0223392120761) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.439450651771 (0.0186141229143) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.134222281695 (0.0259786354427) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.36626642699 (0.0405163736021) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.439450651771 (0.0186141229143) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.193110991755 (0.00466114726318) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.272135267189 (0.0277553329331) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.280941622362 (0.0127051159096) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.398439907625 (0.0298881400047) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.177597549372 (0.0116077518723) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.283169139464 (0.0176517644375) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.332570146654 (0.0497797078052) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.364108004719 (0.0387710978564) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.274858848822 (0.0116967281808) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.100712459129 (0.00215265719505) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.401818933012 (0.0522491404147) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.325869918941 (0.0695260770392) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.364780970549 (0.0273226966967) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.0990541146837 (0.00175531852234) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_digits_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 0, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'normalizer': 1, 'normalizer_StandardScaler_normalizer__with_mean': 1, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 0, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'normalizer': 1, 'normalizer_StandardScaler_normalizer__with_mean': 1, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '7eedc1da050b7a0f1bbf07cc2042b2b022e6930f', 'pipeline': 'edb2740dd0b08b8b2561b2f349146a9dd19f0a02'}, 'duration': 0.7628600597381592, 'iteration': 25, 'loss': 0.560549348228961, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.4394506517710391, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '190193d8cef8f66634a9fc861ba17a7c866862a6': 21, '1a6edd938f22c40624299d64727fa33d11b70f87': 14, '2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, ...}, 'iteration': 42, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}}
        algorithm = 'DecisionTree'
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        context = {'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '7eedc1da050b7a0f1bbf07cc2042b2b022e6930f', 'pipeline': 'edb2740dd0b08b8b2561b2f349146a9dd19f0a02'}, 'duration': 0.7628600597381592, 'iteration': 25, 'loss': 0.560549348228961, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.4394506517710391, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '190193d8cef8f66634a9fc861ba17a7c866862a6': 21, '1a6edd938f22c40624299d64727fa33d11b70f87': 14, '2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, ...}, 'iteration': 42, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '7eedc1da050b7a0f1bbf07cc2042b2b022e6930f', 'pipeline': 'edb2740dd0b08b8b2561b2f349146a9dd19f0a02'}, 'duration': 0.7628600597381592, 'iteration': 25, 'loss': 0.560549348228961, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.4394506517710391, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '190193d8cef8f66634a9fc861ba17a7c866862a6': 21, '1a6edd938f22c40624299d64727fa33d11b70f87': 14, '2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, ...}, 'iteration': 42, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 13:22:37 2019
PID: 22488                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), scorer={'score': <function _passthrough_scorer>}, train=array([ 169,  176,  178, ..., 1794, 1795, 1796]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y_train = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([9, 5, 0, ..., 8, 9, 8]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-16.566792  ],
       [ -2.79495658],
  ...],
       [ -4.12293105],
       [ -0.60753013]])
        yt = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-16.566792  ],
       [ -2.79495658],
  ...],
       [ -4.12293105],
       [ -0.60753013]]), y=array([9, 5, 0, ..., 8, 9, 8]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-16.566792 ],
       [ -2.7949567],
    ...4.122931 ],
       [ -0.6075301]], dtype=float32), y=array([[9.],
       [5.],
       [0.],
       ...,
       [8.],
       [9.],
       [8.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.0 (0.0) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.234148662673 (0.0434096641657) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.338507517047 (0.034310978285) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.195305916917 (0.0055412028231) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_digits_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'normalizer': 1, 'normalizer_StandardScaler_normalizer__with_mean': 1, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'normalizer': 1, 'normalizer_StandardScaler_normalizer__with_mean': 1, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '7eedc1da050b7a0f1bbf07cc2042b2b022e6930f', 'pipeline': 'edb2740dd0b08b8b2561b2f349146a9dd19f0a02'}, 'duration': 0.7628600597381592, 'iteration': 25, 'loss': 0.560549348228961, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.4394506517710391, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '190193d8cef8f66634a9fc861ba17a7c866862a6': 21, '1a6edd938f22c40624299d64727fa33d11b70f87': 14, '2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, ...}, 'iteration': 46, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}}
        algorithm = 'DecisionTree'
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        context = {'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '7eedc1da050b7a0f1bbf07cc2042b2b022e6930f', 'pipeline': 'edb2740dd0b08b8b2561b2f349146a9dd19f0a02'}, 'duration': 0.7628600597381592, 'iteration': 25, 'loss': 0.560549348228961, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.4394506517710391, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '190193d8cef8f66634a9fc861ba17a7c866862a6': 21, '1a6edd938f22c40624299d64727fa33d11b70f87': 14, '2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, ...}, 'iteration': 46, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '7eedc1da050b7a0f1bbf07cc2042b2b022e6930f', 'pipeline': 'edb2740dd0b08b8b2561b2f349146a9dd19f0a02'}, 'duration': 0.7628600597381592, 'iteration': 25, 'loss': 0.560549348228961, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.4394506517710391, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '190193d8cef8f66634a9fc861ba17a7c866862a6': 21, '1a6edd938f22c40624299d64727fa33d11b70f87': 14, '2c497a1454f0a7dcf2abb165291c25821d4d1b27': 4, '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff': 0, ...}, 'iteration': 46, 'max_history_score': 0.4394506517710391, 'max_history_score_std': 0.018614122914346824, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 13:22:47 2019
PID: 22584                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), scorer={'score': <function _passthrough_scorer>}, train=array([ 169,  176,  178, ..., 1794, 1795, 1796]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y_train = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([9, 5, 0, ..., 8, 9, 8]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[4.],
       [5.],
       [4.],
       ...,
       [0.],
       [0.],
       [0.]])
        yt = array([0, 0, 0, ..., 9, 9, 9])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[4.],
       [5.],
       [4.],
       ...,
       [0.],
       [0.],
       [0.]]), y=array([0, 0, 0, ..., 9, 9, 9]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[4.],
       [5.],
       [4.],
       .....  [0.],
       [0.],
       [0.]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       ...,
       [9.],
       [9.],
       [9.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.0 (0.0) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.176593640243 (0.0425874009021) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.156291882371 (0.0116704442255) [J]
Best score: 0.439450651771 (0.0186141229143) [J] | Score: 0.439450651771 (0.0186141229143) [J]
Best score: 0.716180865042 (0.0788061522601) [J] | Score: 0.716180865042 (0.0788061522601) [J]
Best score: 0.716180865042 (0.0788061522601) [J] | Score: 0.372829782753 (0.0641934415427) [J]
Best score: 0.716180865042 (0.0788061522601) [J] | Score: 0.31327002649 (0.0321247903034) [J]
Best score: 0.728353637507 (0.0397046132749) [J] | Score: 0.728353637507 (0.0397046132749) [J]
Best score: 0.741515006235 (0.0337043298467) [J] | Score: 0.741515006235 (0.0337043298467) [J]
Best score: 0.741515006235 (0.0337043298467) [J] | Score: 0.721731540402 (0.0382332783829) [J]
Best score: 0.741515006235 (0.0337043298467) [J] | Score: 0.739888023595 (0.0379057514289) [J]
Best score: 0.741515006235 (0.0337043298467) [J] | Score: 0.640680305232 (0.0568811329979) [J]
Best score: 0.741515006235 (0.0337043298467) [J] | Score: 0.294237954225 (0.0457299806339) [J]
Best score: 0.741515006235 (0.0337043298467) [J] | Score: 0.437239391416 (0.0472036925114) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.743302280492 (0.0383908306962) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.33269252704 (0.0286161125955) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.192071424552 (0.0145604564295) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.110696397304 (0.0283640254832) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.609776717409 (0.0339742938167) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.206392958899 (0.0301434684669) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.52586061711 (0.0690157406296) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.192071424552 (0.0145604564295) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.195247650628 (0.0106253702834) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.332680777139 (0.0379248707648) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.195359604424 (0.0201208933727) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.436012637658 (0.0503062670333) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.192071424552 (0.0145604564295) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.189265989343 (0.0104031758875) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.112337626009 (0.0211505889974) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.254318708205 (0.027537993084) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.204135675488 (0.0900697908559) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.363268758735 (0.0433293864137) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.192448184464 (0.0131693942719) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.115237595407 (0.0302032838684) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_digits_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 0, 'normalizer': 1, 'normalizer_StandardScaler_normalizer__with_mean': 0, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 0, 'normalizer': 1, 'normalizer_StandardScaler_normalizer__with_mean': 0, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cb768a833814d7a7d13fb865e3b1ab96aafa9f08', 'config': '998ca599b4baffdd1ba6453ea27ab50ed13bbb62', 'pipeline': '90c76733636bb990cb25d43b798f8488769a85bf'}, 'duration': 1.6844120025634766, 'iteration': 61, 'loss': 0.2566977195078972, 'max_history_score': 0.7433022804921028, 'max_history_score_std': 0.038390830696151755, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7433022804921028, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '0ee2ce0ac8ae4748428b3fe38f2dfb588a5640bb': 80, '0fa70b0fbcf6e3ad4a04d09f16e2548fc30462fc': 78, '129cd379724e04686abe124237c152f95c84e0b5': 58, ...}, 'iteration': 80, 'max_history_score': 0.7433022804921028, 'max_history_score_std': 0.038390830696151755, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}}
        algorithm = 'DecisionTree'
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        context = {'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cb768a833814d7a7d13fb865e3b1ab96aafa9f08', 'config': '998ca599b4baffdd1ba6453ea27ab50ed13bbb62', 'pipeline': '90c76733636bb990cb25d43b798f8488769a85bf'}, 'duration': 1.6844120025634766, 'iteration': 61, 'loss': 0.2566977195078972, 'max_history_score': 0.7433022804921028, 'max_history_score_std': 0.038390830696151755, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7433022804921028, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '0ee2ce0ac8ae4748428b3fe38f2dfb588a5640bb': 80, '0fa70b0fbcf6e3ad4a04d09f16e2548fc30462fc': 78, '129cd379724e04686abe124237c152f95c84e0b5': 58, ...}, 'iteration': 80, 'max_history_score': 0.7433022804921028, 'max_history_score_std': 0.038390830696151755, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cb768a833814d7a7d13fb865e3b1ab96aafa9f08', 'config': '998ca599b4baffdd1ba6453ea27ab50ed13bbb62', 'pipeline': '90c76733636bb990cb25d43b798f8488769a85bf'}, 'duration': 1.6844120025634766, 'iteration': 61, 'loss': 0.2566977195078972, 'max_history_score': 0.7433022804921028, 'max_history_score_std': 0.038390830696151755, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7433022804921028, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '0ee2ce0ac8ae4748428b3fe38f2dfb588a5640bb': 80, '0fa70b0fbcf6e3ad4a04d09f16e2548fc30462fc': 78, '129cd379724e04686abe124237c152f95c84e0b5': 58, ...}, 'iteration': 80, 'max_history_score': 0.7433022804921028, 'max_history_score_std': 0.038390830696151755, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 13:23:58 2019
PID: 22647                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), scorer={'score': <function _passthrough_scorer>}, train=array([ 169,  176,  178, ..., 1794, 1795, 1796]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y_train = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([9, 5, 0, ..., 8, 9, 8]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[ 1.63141026],
       [ 2.63141026],
    ...74],
       [-2.36858974],
       [-2.36858974]])
        yt = array([0, 0, 0, ..., 9, 9, 9])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 1.63141026],
       [ 2.63141026],
    ...74],
       [-2.36858974],
       [-2.36858974]]), y=array([0, 0, 0, ..., 9, 9, 9]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 1.6314102],
       [ 2.6314104],
      ...-2.3685896],
       [-2.3685896]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       ...,
       [9.],
       [9.],
       [9.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.0 (0.0) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.272101686512 (0.0191197500323) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.306606616663 (0.037772695093) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.301864081705 (0.059723753198) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.195318312569 (0.005429228929) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.24870016927 (0.0593499025031) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.656174367485 (0.0448543796162) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.154060103254 (0.0111873385476) [J]
Best score: 0.743302280492 (0.0383908306962) [J] | Score: 0.250804676735 (0.0199567575644) [J]
Best score: 0.757808336443 (0.0264318550128) [J] | Score: 0.757808336443 (0.0264318550128) [J]
Best score: 0.757808336443 (0.0264318550128) [J] | Score: 0.19532435067 (0.00508496455232) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_digits_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 0, 'normalizer': 0, 'rebalance': 1, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 0, 'normalizer': 0, 'rebalance': 1, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cb768a833814d7a7d13fb865e3b1ab96aafa9f08', 'config': '5820c826717c2c6af6373eee89953f08164a5bf8', 'pipeline': '7025f12f5f7ec50bdc4d40b89a03268070a422f3'}, 'duration': 1.1053950786590576, 'iteration': 90, 'loss': 0.24219166355726607, 'max_history_score': 0.7578083364427339, 'max_history_score_std': 0.026431855012848164, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7578083364427339, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '0ee2ce0ac8ae4748428b3fe38f2dfb588a5640bb': 80, '0fa70b0fbcf6e3ad4a04d09f16e2548fc30462fc': 78, '129cd379724e04686abe124237c152f95c84e0b5': 58, ...}, 'iteration': 91, 'max_history_score': 0.7578083364427339, 'max_history_score_std': 0.026431855012848164, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}}
        algorithm = 'DecisionTree'
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        context = {'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cb768a833814d7a7d13fb865e3b1ab96aafa9f08', 'config': '5820c826717c2c6af6373eee89953f08164a5bf8', 'pipeline': '7025f12f5f7ec50bdc4d40b89a03268070a422f3'}, 'duration': 1.1053950786590576, 'iteration': 90, 'loss': 0.24219166355726607, 'max_history_score': 0.7578083364427339, 'max_history_score_std': 0.026431855012848164, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7578083364427339, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '0ee2ce0ac8ae4748428b3fe38f2dfb588a5640bb': 80, '0fa70b0fbcf6e3ad4a04d09f16e2548fc30462fc': 78, '129cd379724e04686abe124237c152f95c84e0b5': 58, ...}, 'iteration': 91, 'max_history_score': 0.7578083364427339, 'max_history_score_std': 0.026431855012848164, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cb768a833814d7a7d13fb865e3b1ab96aafa9f08', 'config': '5820c826717c2c6af6373eee89953f08164a5bf8', 'pipeline': '7025f12f5f7ec50bdc4d40b89a03268070a422f3'}, 'duration': 1.1053950786590576, 'iteration': 90, 'loss': 0.24219166355726607, 'max_history_score': 0.7578083364427339, 'max_history_score_std': 0.026431855012848164, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7578083364427339, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, '0901fe120c88904d72b4a52f42aa9487fe6af440': 22, '0ee2ce0ac8ae4748428b3fe38f2dfb588a5640bb': 80, '0fa70b0fbcf6e3ad4a04d09f16e2548fc30462fc': 78, '129cd379724e04686abe124237c152f95c84e0b5': 58, ...}, 'iteration': 91, 'max_history_score': 0.7578083364427339, 'max_history_score_std': 0.026431855012848164, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 13:24:15 2019
PID: 22743                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), scorer={'score': <function _passthrough_scorer>}, train=array([ 169,  176,  178, ..., 1794, 1795, 1796]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y_train = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([9, 5, 0, ..., 8, 9, 8]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[4.],
       [5.],
       [4.],
       ...,
       [0.],
       [0.],
       [0.]])
        yt = array([0, 0, 0, ..., 9, 9, 9])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[4.],
       [5.],
       [4.],
       ...,
       [0.],
       [0.],
       [0.]]), y=array([0, 0, 0, ..., 9, 9, 9]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[4.],
       [5.],
       [4.],
       .....  [0.],
       [0.],
       [0.]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       ...,
       [9.],
       [9.],
       [9.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.757808336443 (0.0264318550128) [J] | Score: 0.0 (0.0) [J]
Best score: 0.757808336443 (0.0264318550128) [J] | Score: 0.398785221583 (0.0770111338129) [J]
Best score: 0.757808336443 (0.0264318550128) [J] | Score: 0.278805511876 (0.0110757436387) [J]
Best score: 0.757808336443 (0.0264318550128) [J] | Score: 0.107481080976 (0.0260208355241) [J]
Best score: 0.764580458656 (0.0334789380111) [J] | Score: 0.764580458656 (0.0334789380111) [J]
Best score: 0.764580458656 (0.0334789380111) [J] | Score: 0.315355144156 (0.030019647716) [J]
Best score: 0.764580458656 (0.0334789380111) [J] | Score: 0.1953305237 (0.00532121464873) [J]
Best score: 0.764580458656 (0.0334789380111) [J] | Score: 0.243659730274 (0.0349981070314) [J]
Best score: 0.764580458656 (0.0334789380111) [J] | Score: 0.255268359427 (0.0257185545333) [J]
Best score: 0.764580458656 (0.0334789380111) [J] | Score: 0.0990541146837 (0.00175531852234) [J]
Best score: 0.764580458656 (0.0334789380111) [J] | Score: 0.525825730319 (0.045421299875) [J]
Best score: 0.764580458656 (0.0334789380111) [J] | Score: 0.43095212745 (0.031799233595) [J]
Best score: 0.772108534726 (0.033984597346) [J] | Score: 0.772108534726 (0.033984597346) [J]
Best score: 0.772108534726 (0.033984597346) [J] | Score: 0.185183686223 (0.0161006394475) [J]
Best score: 0.772108534726 (0.033984597346) [J] | Score: 0.197513747927 (0.00525983912635) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.816374486464 (0.0461735892904) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.188989226981 (0.0306963902254) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.101274256881 (0.00127440186725) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.646964163496 (0.0430652558882) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.795426802837 (0.0428482676418) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.144672435319 (0.01749792155) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.194173219095 (0.00776276896474) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.259928384119 (0.0388329906854) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.411696398085 (0.0285202602321) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.101274256881 (0.00127440186725) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.644002739118 (0.0368668235893) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.795426802837 (0.0428482676418) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.131482873692 (0.0147177803389) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.144672435319 (0.01749792155) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.411696398085 (0.0285202602321) [J]
Best score: 0.816374486464 (0.0461735892904) [J] | Score: 0.101274256881 (0.00127440186725) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.817955185535 (0.0350488479768) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.543484794372 (0.0572579890298) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.356767516933 (0.0322244692912) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.194173219095 (0.00776276896474) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.634469781468 (0.0415018288287) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.419381832305 (0.0429045277916) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.101264945316 (0.00244609326436) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.276441288578 (0.0129955254903) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.817955185535 (0.0350488479768) [J]
Best score: 0.817955185535 (0.0350488479768) [J] | Score: 0.52213982638 (0.041088362152) [J]
Best score: 0.824437386396 (0.0362531438276) [J] | Score: 0.824437386396 (0.0362531438276) [J]
Best score: 0.824437386396 (0.0362531438276) [J] | Score: 0.588190340287 (0.0570527179365) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.825321720702 (0.0416535056644) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.641768102246 (0.0375633932392) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.142998741209 (0.0188441645813) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.457753379285 (0.037341247328) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.412826062581 (0.0274278020067) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.186466480199 (0.00776696260013) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.189727657697 (0.00972111779077) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.82199989663 (0.0282085582918) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.534496030328 (0.0431101405215) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.6945751393 (0.0428779659923) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.188688736716 (0.0077464414646) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.604963544298 (0.0361927766934) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.413202057024 (0.042579594687) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.196966515185 (0.00363688047535) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.189727657697 (0.00972111779077) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.357668511958 (0.0245530225357) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.423287282299 (0.0560837927661) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.129222986687 (0.0119103836249) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.373748877962 (0.0330060821169) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.636726575351 (0.0267761990616) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.41610314378 (0.0405193196877) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.189727657697 (0.00972111779077) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.196966515185 (0.00363688047535) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.254577941135 (0.0295122257476) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.821005981379 (0.0533824286185) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.183633494341 (0.00986637318466) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.27845990866 (0.0315206225403) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.808666548916 (0.0512796730341) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.241286213381 (0.0369446265589) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.107481080976 (0.0260208355241) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.467764540747 (0.0451124736821) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.188145912632 (0.00781108338258) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.749426539426 (0.0273508334466) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.142998741209 (0.0188441645813) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.531661347774 (0.0765333243422) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.279018567878 (0.0314815545382) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.409923368499 (0.0396675626936) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.304628414807 (0.0260411940504) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.266507552392 (0.0251743729435) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.384313142342 (0.0524784025051) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.196966515185 (0.00363688047535) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.694142242571 (0.0498797562452) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.196966515185 (0.00363688047535) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.578750591889 (0.0435654390193) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.351514494352 (0.0296494601004) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.620567822928 (0.0308663348202) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.189727657697 (0.00972111779077) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.306818219879 (0.0353228298791) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.817084064592 (0.038273346608) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.146909355734 (0.0235382931337) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.196966515185 (0.00363688047535) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_digits_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'normalizer': 4, 'normalizer_RobustScaler_normalizer__quantile_range': 2, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'normalizer': 4, 'normalizer_RobustScaler_normalizer__quantile_range': 2, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (5.0, 95.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (5.0, 95.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a273fe204cbb787bf46d12232d4223efdce297b', 'config': 'd5a10d2ed9a7a7becd8eed7c6d37b94b41c696d8', 'pipeline': 'cd3209e8d2440df14f63069a1a831ec763ece365'}, 'duration': 0.34153199195861816, 'iteration': 135, 'loss': 0.17467827929774626, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (10.0, 90.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8253217207022537, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'015dc0a3d3a2f445389a064ff037162f3fca51ee': 182, '0274b5621808b80e865475b5d344fc36279d185c': 185, '03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '03cfb832b98b62922f6482ae84e2ab48c3dfb2a7': 151, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '06a5ca5a905b0e68d51e415c86628287875585a0': 119, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, ...}, 'iteration': 185, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (5.0, 95.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}}
        algorithm = 'DecisionTree'
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        context = {'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a273fe204cbb787bf46d12232d4223efdce297b', 'config': 'd5a10d2ed9a7a7becd8eed7c6d37b94b41c696d8', 'pipeline': 'cd3209e8d2440df14f63069a1a831ec763ece365'}, 'duration': 0.34153199195861816, 'iteration': 135, 'loss': 0.17467827929774626, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (10.0, 90.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8253217207022537, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'015dc0a3d3a2f445389a064ff037162f3fca51ee': 182, '0274b5621808b80e865475b5d344fc36279d185c': 185, '03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '03cfb832b98b62922f6482ae84e2ab48c3dfb2a7': 151, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '06a5ca5a905b0e68d51e415c86628287875585a0': 119, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, ...}, 'iteration': 185, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (5.0, 95.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a273fe204cbb787bf46d12232d4223efdce297b', 'config': 'd5a10d2ed9a7a7becd8eed7c6d37b94b41c696d8', 'pipeline': 'cd3209e8d2440df14f63069a1a831ec763ece365'}, 'duration': 0.34153199195861816, 'iteration': 135, 'loss': 0.17467827929774626, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (10.0, 90.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8253217207022537, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'015dc0a3d3a2f445389a064ff037162f3fca51ee': 182, '0274b5621808b80e865475b5d344fc36279d185c': 185, '03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '03cfb832b98b62922f6482ae84e2ab48c3dfb2a7': 151, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '06a5ca5a905b0e68d51e415c86628287875585a0': 119, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, ...}, 'iteration': 185, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 13:25:43 2019
PID: 22811                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), scorer={'score': <function _passthrough_scorer>}, train=array([ 169,  176,  178, ..., 1794, 1795, 1796]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y_train = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([9, 5, 0, ..., 8, 9, 8]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[ 8.],
       [ 8.],
       [ 0.],
      ...[ 0.],
       [ 0.],
       [ 0.],
       [ 0.]])
        yt = array([0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,...9, 9, 9, 9, 9, 9,
       9, 9, 9, 9, 9, 9, 9, 9])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[ 8.],
       [ 8.],
       [ 0.],
      ...[ 0.],
       [ 0.],
       [ 0.],
       [ 0.]]), y=array([0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,...9, 9, 9, 9, 9, 9,
       9, 9, 9, 9, 9, 9, 9, 9]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[ 8.],
       [ 8.],
       [ 0.],
      ... 0.],
       [ 0.],
       [ 0.]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [1...    [9.],
       [9.],
       [9.],
       [9.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.0 (0.0) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.382857889316 (0.0443638921676) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.421275413143 (0.0841984693646) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.0990541146837 (0.00175531852234) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.64118419229 (0.0377576306893) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.803896023512 (0.0409661424357) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.387891493939 (0.0619433718824) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.184636833149 (0.015614728367) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.628485298833 (0.0386387279215) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.383458441041 (0.0239135733826) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.802090759946 (0.0449928438184) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.189727657697 (0.00972111779077) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.307177488927 (0.0775450225926) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.641768102246 (0.0333375523216) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_digits_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'normalizer': 4, 'normalizer_RobustScaler_normalizer__quantile_range': 0, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'normalizer': 4, 'normalizer_RobustScaler_normalizer__quantile_range': 0, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (25.0, 75.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (25.0, 75.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a273fe204cbb787bf46d12232d4223efdce297b', 'config': 'd5a10d2ed9a7a7becd8eed7c6d37b94b41c696d8', 'pipeline': 'cd3209e8d2440df14f63069a1a831ec763ece365'}, 'duration': 0.34153199195861816, 'iteration': 135, 'loss': 0.17467827929774626, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (10.0, 90.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8253217207022537, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'015dc0a3d3a2f445389a064ff037162f3fca51ee': 182, '0274b5621808b80e865475b5d344fc36279d185c': 185, '03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '03cfb832b98b62922f6482ae84e2ab48c3dfb2a7': 151, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '06a5ca5a905b0e68d51e415c86628287875585a0': 119, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, ...}, 'iteration': 199, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (25.0, 75.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}}
        algorithm = 'DecisionTree'
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        context = {'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a273fe204cbb787bf46d12232d4223efdce297b', 'config': 'd5a10d2ed9a7a7becd8eed7c6d37b94b41c696d8', 'pipeline': 'cd3209e8d2440df14f63069a1a831ec763ece365'}, 'duration': 0.34153199195861816, 'iteration': 135, 'loss': 0.17467827929774626, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (10.0, 90.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8253217207022537, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'015dc0a3d3a2f445389a064ff037162f3fca51ee': 182, '0274b5621808b80e865475b5d344fc36279d185c': 185, '03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '03cfb832b98b62922f6482ae84e2ab48c3dfb2a7': 151, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '06a5ca5a905b0e68d51e415c86628287875585a0': 119, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, ...}, 'iteration': 199, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (25.0, 75.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), context={'baseline_score': 0.8370850802141552, 'baseline_score_std': 0.04023050598893108, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a273fe204cbb787bf46d12232d4223efdce297b', 'config': 'd5a10d2ed9a7a7becd8eed7c6d37b94b41c696d8', 'pipeline': 'cd3209e8d2440df14f63069a1a831ec763ece365'}, 'duration': 0.34153199195861816, 'iteration': 135, 'loss': 0.17467827929774626, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (10.0, 90.0), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8253217207022537, ...}, 'history': [{'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'f4befda3b8c5c3cc98d3b9a3a9df3ba49c09a071', 'config': '2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', 'pipeline': 'fb999f29ea59a3d45d7ad14f623bce5056ee8002'}, 'duration': 0.3644850254058838, 'iteration': 0, 'loss': 0.7609684516002891, 'max_history_score': 0.23903154839971083, 'max_history_score_std': 0.032479313156119266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.23903154839971083, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'cbee71d29946cfd2d261342d4d40e09b8e5b19b5', 'config': '328918e747be982da02f8f9a41e757adea6cd69f', 'pipeline': 'd4abaadeb5d3e3f047782ffe6ab04711e4707308'}, 'duration': 1.231024980545044, 'iteration': 1, 'loss': 0.7407983444855014, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.2592016555144986, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '031e5e803ebdcd8fb78bf837fa59a2943b7239e5', 'config': 'ffe808ec38f967142916be29896acc818f839e3c', 'pipeline': 'e611830e7eed1817d93081401e95757d1e88faf1'}, 'duration': 0.8996560573577881, 'iteration': 2, 'loss': 0.8096620719162587, 'max_history_score': 0.2592016555144986, 'max_history_score_std': 0.013429490795537227, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.19033792808374125, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '662b08ef9ee56bfe3b5dc423170e54d99b9f609e', 'config': '5472962b0d30ab052475cb002e19a264f84ee7dd', 'pipeline': '3193e72a65282d94dd984356117d6edc64da2c3d'}, 'duration': 2.3833510875701904, 'iteration': 3, 'loss': 0.6555363749712322, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.3444636250287678, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '4a1af7be201a256202aef51cd5a42d89ec663838', 'config': '2c497a1454f0a7dcf2abb165291c25821d4d1b27', 'pipeline': '8ba219ec960f97ed68b492c59fbc47e6c5051c8f'}, 'duration': 4.175241947174072, 'iteration': 4, 'loss': 0.7660566839319227, 'max_history_score': 0.3444636250287678, 'max_history_score_std': 0.05654100475315453, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.23394331606807728, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '3c643170830e02ed11365abf651775cc0fce485b', 'config': '5c4c25a8467ccee9465d2451393a7bcec1206e2c', 'pipeline': '847eda52a77a05f342efc80027fd46e2eb19d82c'}, 'duration': 1.5893340110778809, 'iteration': 5, 'loss': 0.5794736080163883, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.4205263919836117, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'bb9be700d82d7b056a1af88cc49a032dcc2cdbb3', 'config': '3c06701d03094fd5f9963633bce5d66eeab6ea34', 'pipeline': 'e843f570f3c460eeb247f5f7b6ff5733d45d4791'}, 'duration': 4.339846849441528, 'iteration': 6, 'loss': 0.7883001581585506, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.21169984184144944, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '7447372bb6c8d75d640ca06c1ce5e5b833590492', 'config': '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'pipeline': '22e9159f8165b147df82b9b082e66323643daa6f'}, 'duration': 2.6496829986572266, 'iteration': 7, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '3b532d9ba43a96335ced60b80b06bb02fd00a2a2', 'config': 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', 'pipeline': '7c1d7d9d142310d853872833754fcbeeecab75cc'}, 'duration': 6.797382116317749, 'iteration': 8, 'loss': 0.8931830399516999, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.10681696004830013, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '8931a09bf5a5062ada42c292170475f67036c81c', 'config': '03bb94dd14ac4481054a2dc1f3518671a8458eca', 'pipeline': '2f0c000fb976c4ca831c80a39bb331a857ad7918'}, 'duration': 0.122222900390625, 'iteration': 9, 'loss': 0.6107441176015004, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.3892558823984996, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '8c0e4c091ed1273a6ceac3b7000cf3a92d12a699', 'config': '32956a1193fbc87dae2c2eef811fad50f783e210', 'pipeline': '7b2817e2d013ebe4626dc2be4b9ab8a745e58d85'}, 'duration': 4.848810195922852, 'iteration': 10, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '34a0bbca113bbe5e56de5f5a39861306ba970231', 'config': 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'pipeline': '6ab78e6341a6c57b0cba58fb64826a7d9483fb64'}, 'duration': 0.9258778095245361, 'iteration': 11, 'loss': 0.731762557272025, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.26823744272797506, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '9df58e74fb0dac9c4da9fd721c6ef5347bc0af3b', 'config': 'b283f06343a1db56b63e891be3ce4798310032e6', 'pipeline': '37f14eed0ce90ce4531d217dfde8fd73c974ef0c'}, 'duration': 6.01193904876709, 'iteration': 12, 'loss': 0.9031836607226974, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.09681633927730256, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '25709df9c63c0b187498e5963d334e43bdca702b', 'config': 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.892996072769165, 'iteration': 13, 'loss': 0.770715840446313, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.22928415955368692, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e8f9293eb9c6d966f54bd285a1e19114ae0eef66', 'config': '1a6edd938f22c40624299d64727fa33d11b70f87', 'pipeline': '02617dacbc7407b9c21142674df396b835a6f8c6'}, 'duration': 4.007797002792358, 'iteration': 14, 'loss': 0.8862165754947825, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.11378342450521753, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '607a98c770ec409eb9b9da34949964cd267310a0', 'config': '8e803cf1b433c0458fd57282e7d7505da6730f90', 'pipeline': '352f1106a4472cb177ba3f4f4853886002b6a014'}, 'duration': 0.32628393173217773, 'iteration': 15, 'loss': 0.77301237727898, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.22698762272102, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'e87b2a484b72e63cbea98713d65368c742b56346', 'config': '723356039433c39b6a109b44eed1527001dc149f', 'pipeline': 'b8ff9f5f75543f8fd8207d27a796a110d41fa4fb'}, 'duration': 0.9043970108032227, 'iteration': 16, 'loss': 0.6889826087718289, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.311017391228171, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '076ceb43c57ea19349ffbb4515909eab73971d05', 'pipeline': '81395b39f063243001d7120f2d6d00df2947847c'}, 'duration': 4.276605129241943, 'iteration': 17, 'loss': 0.7782547449212202, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.22174525507877987, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '914ca7aef10ff03f9549ec249c74006536313281', 'config': '05203671c81c7d74fe5af7f812a0cc3b962c6480', 'pipeline': '78028fec3489bc1290cd6e3a5ffef640e07fd746'}, 'duration': 0.5622658729553223, 'iteration': 18, 'loss': 1.0, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '33728afe583d2191bdfa9a12834ba6a44cbff175', 'config': '077c1ea6a287bb96964ec132e0635097e3328d2d', 'pipeline': 'c190334467929502c1895688d9a17c3c88284f22'}, 'duration': 2.0128250122070312, 'iteration': 19, 'loss': 0.7246678378982108, 'max_history_score': 0.4205263919836117, 'max_history_score_std': 0.04260120923670004, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.2753321621017893, ...}, ...], 'history_hash': ['2d9a3084981484f57a6614f3bbfeb12c4e6e79ff', '328918e747be982da02f8f9a41e757adea6cd69f', 'ffe808ec38f967142916be29896acc818f839e3c', '5472962b0d30ab052475cb002e19a264f84ee7dd', '2c497a1454f0a7dcf2abb165291c25821d4d1b27', '5c4c25a8467ccee9465d2451393a7bcec1206e2c', '3c06701d03094fd5f9963633bce5d66eeab6ea34', '7e07231bead66ed8acbc0b148122fd7b2e1984b5', 'd1c65b9869b4d56040cebd7b614a5884a1a6228b', '03bb94dd14ac4481054a2dc1f3518671a8458eca', '32956a1193fbc87dae2c2eef811fad50f783e210', 'b4e8e60a8bac8b020e9f6a0965caebce55a7cdd1', 'b283f06343a1db56b63e891be3ce4798310032e6', 'a74dd32dca2135685cf128e52d8e1dfa180de3b0', '1a6edd938f22c40624299d64727fa33d11b70f87', '8e803cf1b433c0458fd57282e7d7505da6730f90', '723356039433c39b6a109b44eed1527001dc149f', '076ceb43c57ea19349ffbb4515909eab73971d05', '05203671c81c7d74fe5af7f812a0cc3b962c6480', '077c1ea6a287bb96964ec132e0635097e3328d2d', ...], 'history_index': {'015dc0a3d3a2f445389a064ff037162f3fca51ee': 182, '0274b5621808b80e865475b5d344fc36279d185c': 185, '03bb94dd14ac4481054a2dc1f3518671a8458eca': 9, '03cfb832b98b62922f6482ae84e2ab48c3dfb2a7': 151, '050ea2abb867b2c56369b8a99545795cef280ed5': 39, '05203671c81c7d74fe5af7f812a0cc3b962c6480': 18, '0658ade5119541dee943188d41d6219c799b468e': 69, '06a5ca5a905b0e68d51e415c86628287875585a0': 119, '076ceb43c57ea19349ffbb4515909eab73971d05': 17, '077c1ea6a287bb96964ec132e0635097e3328d2d': 19, ...}, 'iteration': 199, 'max_history_score': 0.8253217207022537, 'max_history_score_std': 0.041653505664389655, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y = array([0, 1, 2, ..., 8, 9, 8])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 13:26:02 2019
PID: 22972                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), array([0, 1, 2, ..., 8, 9, 8]), {'score': <function _passthrough_scorer>}, array([ 169,  176,  178, ..., 1794, 1795, 1796]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([0, 1, 2, ..., 8, 9, 8]), scorer={'score': <function _passthrough_scorer>}, train=array([ 169,  176,  178, ..., 1794, 1795, 1796]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ..., 181, 186, 188, 189, 190,
       194, 195, 198]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]])
        y_train = array([9, 5, 0, ..., 8, 9, 8])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[ 0.,  0.,  6., ...,  9.,  4.,  0.],
    ...0.],
       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), y=array([9, 5, 0, ..., 8, 9, 8]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[0.        ],
       [0.        ],
      ...    ],
       [0.        ],
       [0.04954531]])
        yt = array([9, 5, 0, ..., 8, 9, 9])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[0.        ],
       [0.        ],
      ...    ],
       [0.        ],
       [0.04954531]]), y=array([9, 5, 0, ..., 8, 9, 9]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[0.        ],
       [0.        ],
      ...0.        ],
       [0.04954531]], dtype=float32), y=array([[9.],
       [5.],
       [0.],
       ...,
       [8.],
       [9.],
       [9.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.0 (0.0) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.196966515185 (0.00363688047535) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.399900470311 (0.0358506917278) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.35441944705 (0.0289239230046) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.24672107863 (0.0550781193571) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.189727657697 (0.00972111779077) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.542944253832 (0.0582192082468) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.494396726417 (0.0615256234077) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.642882317611 (0.0377740197354) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.130352930189 (0.0129516098313) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.186616287105 (0.0700883033938) [J]
Best score: 0.825321720702 (0.0416535056644) [J] | Score: 0.38560534538 (0.0489473991397) [J]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_NoneType", 
        {}
    ], 
    "normalizer": [
        "normalizer_RobustScaler", 
        {
            "normalizer__quantile_range": [
                10.0, 
                90.0
            ], 
            "normalizer__with_centering": false, 
            "normalizer__with_scaling": false
        }
    ], 
    "rebalance": [
        "rebalance_SMOTE", 
        {
            "rebalance__k_neighbors": 6
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": null, 
    "max_features": null, 
    "max_leaf_nodes": null, 
    "min_samples_leaf": 1, 
    "min_samples_split": 5, 
    "splitter": "random"
}
BEST SCORE: 0.825321720702 (0.0416535056644)
##################################################
